
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000fb2  00001046  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000226  008000a6  008000a6  0000108c  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000040b  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab8  00000000  00000000  000014f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000432  00000000  00000000  00001faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c6b  00000000  00000000  000023e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  0000304c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b1  00000000  00000000  000031fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000038e  00000000  00000000  000037ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00003b3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__ctors_end>
   4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
   8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
   c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
  10:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
  14:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
  18:	0c 94 c4 04 	jmp	0x988	; 0x988 <__vector_6>
  1c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
  20:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
  24:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
  28:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
  2c:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__vector_11>
  30:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
  34:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
  38:	0c 94 91 01 	jmp	0x322	; 0x322 <__vector_14>
  3c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
  40:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
  44:	0c 94 95 04 	jmp	0x92a	; 0x92a <__vector_17>
  48:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
  4c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
  50:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>

00000054 <rowArray>:
  54:	00 fe 82 fe 00 00 fe 82 fe 00 00 fe 82 fe 00 00     ................
  64:	fe 82 fe 00 00 fe 82 fe 00 00 fe 82 fe 00 00 fe     ................
  74:	82 fe 00 00 fe 82 fe 00 00 fe 82 fe 00 00 fe 82     ................
  84:	fe 00 00 fe 82 fe 00 00 fe 82 fe 00 00 fe 82 fe     ................
  94:	00 00 fe 82 fe 00 00 fe 82 fe 00 00 fe 82 fe 00     ................
  a4:	00 fe 82 fe 00 00 fe 82 fe 00 00 fe 82 fe 00 00     ................
  b4:	fe 82 fe 00 00 fe 82 fe 00 00 fe 82 fe 00 00 fe     ................
  c4:	82 fe 00 00 fe 82 fe 00 00 fe 82 fe 00 00 fe 82     ................
  d4:	fe 00 00 fe 82 fe 00 00 fe 82 fe 00 00 fe 82 fe     ................
  e4:	00 00 fe 82 fe 00 00 fe 82 fe 00 00 fe 82 fe 00     ................
  f4:	00 00 00 00 00 00 00 3d 00 00 00 e0 00 e0 00 00     .......=........
 104:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 114:	00 00 00 00 00 00 00 00 00 3c 42 81 00 00 81 42     .........<B....B
 124:	3c 00 00 00 00 00 00 00 00 00 00 00 00 05 06 00     <...............
 134:	00 00 08 08 08 00 00 06 06 00 00 02 04 08 10 20     ............... 
 144:	7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a 92 62 84     |...|.B...B...b.
 154:	82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2 9c 3c 52     .....(H.......<R
 164:	92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c 60 92 92     ........l...l`..
 174:	94 78 00 36 36 00 00 00 35 36 00 00 00 00 00 00     .x.66...56......
 184:	00 00 00 00 00 00 00 00 00 00 00 20 40 45 48 30     ........... @EH0
 194:	00 00 00 00 00 7e 88 88 88 7e fe 92 92 92 6c 7c     .....~...~....l|
 1a4:	82 82 82 44 fe 82 82 44 38 fe 92 92 92 82 fe 90     ...D...D8.......
 1b4:	90 90 80 7c 82 92 92 5c fe 10 10 10 fe 00 82 fe     ...|...\........
 1c4:	82 00 0c 02 82 fc 80 fe 10 28 44 82 fe 02 02 02     .........(D.....
 1d4:	02 fe 40 30 40 fe fe 20 10 08 fe 7c 82 82 82 7c     ..@0@.. ...|...|
 1e4:	fe 90 90 90 60 7c 82 86 82 7d fe 90 98 94 62 64     ....`|...}....bd
 1f4:	92 92 92 4c 80 80 fe 80 80 fc 02 02 02 fc f8 04     ...L............
 204:	02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6 e0 10 0e     .........(.(....
 214:	10 e0 86 8a 92 a2 c2 00 ff 81 81 00 00 00 00 00     ................
 224:	00 00 81 81 ff 00 00 00 00 00 00 00 00 00 00 00     ................
 234:	00 00 00 00 00 04 2a 2a 2a 1e fe 22 22 22 1c 1c     ......***.."""..
 244:	22 22 22 12 1c 22 22 22 fe 1c 2a 2a 2a 1a 20 7f     """.."""..***. .
 254:	a0 80 00 19 25 25 25 1e fe 20 20 20 1e 00 22 be     ....%%%..   ..".
 264:	02 00 02 01 21 be 00 00 fe 08 14 22 00 82 fe 02     ....!......"....
 274:	00 3e 20 3e 20 1e 3e 20 20 20 1e 1c 22 22 22 1c     .> > .>   ..""".
 284:	3f 24 24 24 18 18 24 24 24 3f 20 1e 20 20 10 12     ?$$$..$$$? .  ..
 294:	2a 2a 2a 24 20 7c 22 22 00 3c 02 02 02 3c 38 04     ***$ |"".<...<8.
 2a4:	02 04 38 3c 02 1c 02 3c 22 14 08 14 22 38 05 05     ..8<...<"..."8..
 2b4:	05 3e 22 26 2a 32 22 0e 04 08 10 20 00 fe 82 fe     .>"&*2".... ....
 2c4:	00 00 fe 82 fe 00 00 fe 82 fe 00 00 fe 82 fe 00     ................

000002d4 <__ctors_end>:
 2d4:	11 24       	eor	r1, r1
 2d6:	1f be       	out	0x3f, r1	; 63
 2d8:	cf e5       	ldi	r28, 0x5F	; 95
 2da:	d4 e0       	ldi	r29, 0x04	; 4
 2dc:	de bf       	out	0x3e, r29	; 62
 2de:	cd bf       	out	0x3d, r28	; 61

000002e0 <__do_copy_data>:
 2e0:	10 e0       	ldi	r17, 0x00	; 0
 2e2:	a0 e6       	ldi	r26, 0x60	; 96
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	e2 eb       	ldi	r30, 0xB2	; 178
 2e8:	ff e0       	ldi	r31, 0x0F	; 15
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <.do_copy_data_start>

000002ec <.do_copy_data_loop>:
 2ec:	05 90       	lpm	r0, Z+
 2ee:	0d 92       	st	X+, r0

000002f0 <.do_copy_data_start>:
 2f0:	a6 3a       	cpi	r26, 0xA6	; 166
 2f2:	b1 07       	cpc	r27, r17
 2f4:	d9 f7       	brne	.-10     	; 0x2ec <.do_copy_data_loop>

000002f6 <__do_clear_bss>:
 2f6:	12 e0       	ldi	r17, 0x02	; 2
 2f8:	a6 ea       	ldi	r26, 0xA6	; 166
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	01 c0       	rjmp	.+2      	; 0x300 <.do_clear_bss_start>

000002fe <.do_clear_bss_loop>:
 2fe:	1d 92       	st	X+, r1

00000300 <.do_clear_bss_start>:
 300:	ac 3c       	cpi	r26, 0xCC	; 204
 302:	b1 07       	cpc	r27, r17
 304:	e1 f7       	brne	.-8      	; 0x2fe <.do_clear_bss_loop>
 306:	0e 94 52 06 	call	0xca4	; 0xca4 <main>
 30a:	0c 94 d7 07 	jmp	0xfae	; 0xfae <_exit>

0000030e <__bad_interrupt>:
 30e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000312 <adc_start_conversion>:


void adc_start_conversion()
{
	//set ADC channel
	ADMUX=(ADMUX&0xF0)|0x07;
 312:	87 b1       	in	r24, 0x07	; 7
 314:	80 7f       	andi	r24, 0xF0	; 240
 316:	87 60       	ori	r24, 0x07	; 7
 318:	87 b9       	out	0x07, r24	; 7
	//Start conversion with Interrupt after conversion
	//enable global interrupts
	ADCSRA |= (1<<ADSC)|(1<<ADIE);
 31a:	86 b1       	in	r24, 0x06	; 6
 31c:	88 64       	ori	r24, 0x48	; 72
 31e:	86 b9       	out	0x06, r24	; 6
}
 320:	08 95       	ret

00000322 <__vector_14>:
ISR(ADC_vect)
{
 322:	1f 92       	push	r1
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	2f 93       	push	r18
 32e:	3f 93       	push	r19
 330:	4f 93       	push	r20
 332:	5f 93       	push	r21
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	ef 93       	push	r30
 33a:	ff 93       	push	r31
	int16_t ADData;
	
	static int16_t preAdc=0,adc=0;
	static char prevButton=0;
	char currButton;
	ADData = ADCL;
 33c:	34 b1       	in	r19, 0x04	; 4
	ADData += (ADCH<<8);
 33e:	25 b1       	in	r18, 0x05	; 5
 340:	92 2f       	mov	r25, r18
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	ac 01       	movw	r20, r24
 346:	43 0f       	add	r20, r19
 348:	51 1d       	adc	r21, r1
 34a:	9a 01       	movw	r18, r20
	adc=ADData;
 34c:	50 93 df 01 	sts	0x01DF, r21
 350:	40 93 de 01 	sts	0x01DE, r20
	if(!(PINC&0b10000000))
 354:	9f 99       	sbic	0x13, 7	; 19
 356:	49 c0       	rjmp	.+146    	; 0x3ea <__vector_14+0xc8>
	{
		currButton=bit_is_clear(PINC,6);//Checking the knob select character button
 358:	83 b3       	in	r24, 0x13	; 19
 35a:	82 95       	swap	r24
 35c:	86 95       	lsr	r24
 35e:	86 95       	lsr	r24
 360:	83 70       	andi	r24, 0x03	; 3
 362:	80 95       	com	r24
		if (currButton && !prevButton)
 364:	48 2f       	mov	r20, r24
 366:	41 70       	andi	r20, 0x01	; 1
 368:	80 ff       	sbrs	r24, 0
 36a:	1c c0       	rjmp	.+56     	; 0x3a4 <__vector_14+0x82>
 36c:	80 91 dd 01 	lds	r24, 0x01DD
 370:	88 23       	and	r24, r24
 372:	c1 f4       	brne	.+48     	; 0x3a4 <__vector_14+0x82>
		{
			knobSentence[0]='0';
 374:	80 e3       	ldi	r24, 0x30	; 48
 376:	80 93 e2 01 	sts	0x01E2, r24
			knobSentence[1]='8';
 37a:	88 e3       	ldi	r24, 0x38	; 56
 37c:	80 93 e3 01 	sts	0x01E3, r24
			knobSentence[knobSize++]=knobColumnIndex;
 380:	90 91 84 00 	lds	r25, 0x0084
 384:	e9 2f       	mov	r30, r25
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	ee 51       	subi	r30, 0x1E	; 30
 38a:	fe 4f       	sbci	r31, 0xFE	; 254
 38c:	80 91 79 00 	lds	r24, 0x0079
 390:	80 83       	st	Z, r24
 392:	9f 5f       	subi	r25, 0xFF	; 255
 394:	90 93 84 00 	sts	0x0084, r25
			knobChangeFlag=1;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	80 93 ad 00 	sts	0x00AD, r24
			knobColumnIndex=123;// Showing correct sign after selecting
 39e:	8b e7       	ldi	r24, 0x7B	; 123
 3a0:	80 93 79 00 	sts	0x0079, r24
		}
		prevButton=currButton;
 3a4:	40 93 dd 01 	sts	0x01DD, r20
		knobFlag=1;
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	80 93 aa 00 	sts	0x00AA, r24
		if(adc>870)//Forwarding through the letters
 3ae:	53 e0       	ldi	r21, 0x03	; 3
 3b0:	27 36       	cpi	r18, 0x67	; 103
 3b2:	35 07       	cpc	r19, r21
 3b4:	4c f0       	brlt	.+18     	; 0x3c8 <__vector_14+0xa6>
		{
			knobColumnIndex++;
 3b6:	80 91 79 00 	lds	r24, 0x0079
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	80 93 79 00 	sts	0x0079, r24
			if(knobColumnIndex>124)
 3c0:	8d 37       	cpi	r24, 0x7D	; 125
 3c2:	78 f0       	brcs	.+30     	; 0x3e2 <__vector_14+0xc0>
				knobColumnIndex=124;
 3c4:	8c e7       	ldi	r24, 0x7C	; 124
 3c6:	0b c0       	rjmp	.+22     	; 0x3de <__vector_14+0xbc>
			preAdc=adc;
		}
		else if(adc<100)//Backwarding through the letters
 3c8:	24 36       	cpi	r18, 0x64	; 100
 3ca:	31 05       	cpc	r19, r1
 3cc:	74 f4       	brge	.+28     	; 0x3ea <__vector_14+0xc8>
		{
			knobColumnIndex--;
 3ce:	80 91 79 00 	lds	r24, 0x0079
 3d2:	81 50       	subi	r24, 0x01	; 1
 3d4:	80 93 79 00 	sts	0x0079, r24
			if(knobColumnIndex<33)
 3d8:	81 32       	cpi	r24, 0x21	; 33
 3da:	18 f4       	brcc	.+6      	; 0x3e2 <__vector_14+0xc0>
				knobColumnIndex=33;
 3dc:	81 e2       	ldi	r24, 0x21	; 33
 3de:	80 93 79 00 	sts	0x0079, r24
			preAdc=adc;
 3e2:	30 93 e1 01 	sts	0x01E1, r19
 3e6:	20 93 e0 01 	sts	0x01E0, r18
		}
	}
}
 3ea:	ff 91       	pop	r31
 3ec:	ef 91       	pop	r30
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	5f 91       	pop	r21
 3f4:	4f 91       	pop	r20
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <char2hex>:
	//TIMSK=0x10;
}
// ====================================== Hardware independent functions
char char2hex(char c)
{
	if(c>='0' && c<='9')
 404:	80 53       	subi	r24, 0x30	; 48
 406:	8a 30       	cpi	r24, 0x0A	; 10
 408:	28 f0       	brcs	.+10     	; 0x414 <char2hex+0x10>
	{
		return (c-48);
	}
	else if(c>='A' && c<='F')
 40a:	81 51       	subi	r24, 0x11	; 17
 40c:	86 30       	cpi	r24, 0x06	; 6
 40e:	10 f4       	brcc	.+4      	; 0x414 <char2hex+0x10>
	{
		return (c-55);
 410:	86 5f       	subi	r24, 0xF6	; 246
 412:	08 95       	ret
	}
}
 414:	08 95       	ret

00000416 <ScrollColumnTask>:
	t=0;
}
void ScrollColumnTask()
{
	//sentenceSize=eeprom_read_byte(0x000A);
	if(rightScrollingFlag)
 416:	80 91 42 01 	lds	r24, 0x0142
 41a:	88 23       	and	r24, r24
 41c:	49 f1       	breq	.+82     	; 0x470 <__stack+0x11>
	{	
		columnIndex--;
 41e:	80 91 c8 02 	lds	r24, 0x02C8
 422:	90 91 c9 02 	lds	r25, 0x02C9
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	90 93 c9 02 	sts	0x02C9, r25
 42c:	80 93 c8 02 	sts	0x02C8, r24
		if(columnIndex<0)
 430:	80 91 c8 02 	lds	r24, 0x02C8
 434:	90 91 c9 02 	lds	r25, 0x02C9
 438:	97 ff       	sbrs	r25, 7
 43a:	41 c0       	rjmp	.+130    	; 0x4be <__stack+0x5f>
		{
			columnIndex=5;
 43c:	85 e0       	ldi	r24, 0x05	; 5
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	90 93 c9 02 	sts	0x02C9, r25
 444:	80 93 c8 02 	sts	0x02C8, r24
			sentenceLetterIndex--;
 448:	80 91 c6 02 	lds	r24, 0x02C6
 44c:	90 91 c7 02 	lds	r25, 0x02C7
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	90 93 c7 02 	sts	0x02C7, r25
 456:	80 93 c6 02 	sts	0x02C6, r24
			if(sentenceLetterIndex<0)
 45a:	97 ff       	sbrs	r25, 7
 45c:	30 c0       	rjmp	.+96     	; 0x4be <__stack+0x5f>
				sentenceLetterIndex=(sentenceSize-1);
 45e:	80 91 41 01 	lds	r24, 0x0141
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	90 93 c7 02 	sts	0x02C7, r25
 46a:	80 93 c6 02 	sts	0x02C6, r24
 46e:	08 95       	ret
		}
	}
	else
	{
		columnIndex++;
 470:	80 91 c8 02 	lds	r24, 0x02C8
 474:	90 91 c9 02 	lds	r25, 0x02C9
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	90 93 c9 02 	sts	0x02C9, r25
 47e:	80 93 c8 02 	sts	0x02C8, r24
		if(columnIndex>5)
 482:	80 91 c8 02 	lds	r24, 0x02C8
 486:	90 91 c9 02 	lds	r25, 0x02C9
 48a:	06 97       	sbiw	r24, 0x06	; 6
 48c:	c4 f0       	brlt	.+48     	; 0x4be <__stack+0x5f>
		{
			columnIndex=0;
 48e:	10 92 c9 02 	sts	0x02C9, r1
 492:	10 92 c8 02 	sts	0x02C8, r1
			sentenceLetterIndex++;
 496:	20 91 c6 02 	lds	r18, 0x02C6
 49a:	30 91 c7 02 	lds	r19, 0x02C7
 49e:	2f 5f       	subi	r18, 0xFF	; 255
 4a0:	3f 4f       	sbci	r19, 0xFF	; 255
 4a2:	30 93 c7 02 	sts	0x02C7, r19
 4a6:	20 93 c6 02 	sts	0x02C6, r18
			if(sentenceLetterIndex>(sentenceSize-1))
 4aa:	80 91 41 01 	lds	r24, 0x0141
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	28 17       	cp	r18, r24
 4b2:	39 07       	cpc	r19, r25
 4b4:	24 f0       	brlt	.+8      	; 0x4be <__stack+0x5f>
				sentenceLetterIndex=0;
 4b6:	10 92 c7 02 	sts	0x02C7, r1
 4ba:	10 92 c6 02 	sts	0x02C6, r1
 4be:	08 95       	ret

000004c0 <ShowLetterTask>:
		}
	}
}
void ShowLetterTask()
{
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
	char portbValue;
	int sentenceValue,colShowSum;
	int nextLetter=0;
	sentenceValue=(sentence[sentenceLetterIndex]*5);
 4c4:	60 91 c6 02 	lds	r22, 0x02C6
 4c8:	70 91 c7 02 	lds	r23, 0x02C7
 4cc:	fb 01       	movw	r30, r22
 4ce:	ee 54       	subi	r30, 0x4E	; 78
 4d0:	ff 4f       	sbci	r31, 0xFF	; 255
 4d2:	90 81       	ld	r25, Z
	colShowSum=columnIndex+showColumnIndex;
 4d4:	e0 91 c8 02 	lds	r30, 0x02C8
 4d8:	f0 91 c9 02 	lds	r31, 0x02C9
 4dc:	c0 91 a8 00 	lds	r28, 0x00A8
 4e0:	d0 91 a9 00 	lds	r29, 0x00A9
 4e4:	ec 0f       	add	r30, r28
 4e6:	fd 1f       	adc	r31, r29
	//For fetching next letter in left shift when current letter is the last one 
	if(sentenceLetterIndex==(sentenceSize-1) && rightScrollingFlag==0)
 4e8:	80 91 41 01 	lds	r24, 0x0141
 4ec:	48 2f       	mov	r20, r24
 4ee:	50 e0       	ldi	r21, 0x00	; 0
 4f0:	41 50       	subi	r20, 0x01	; 1
 4f2:	50 40       	sbci	r21, 0x00	; 0
 4f4:	64 17       	cp	r22, r20
 4f6:	75 07       	cpc	r23, r21
 4f8:	39 f4       	brne	.+14     	; 0x508 <ShowLetterTask+0x48>
 4fa:	80 91 42 01 	lds	r24, 0x0142
 4fe:	88 23       	and	r24, r24
 500:	71 f4       	brne	.+28     	; 0x51e <ShowLetterTask+0x5e>
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	18 c0       	rjmp	.+48     	; 0x538 <ShowLetterTask+0x78>
		nextLetter=0;
	//For fetching next letter in left shift when current letter isn't the last one 
	else if(sentenceLetterIndex<(sentenceSize-1) && rightScrollingFlag==0)
 508:	64 17       	cp	r22, r20
 50a:	75 07       	cpc	r23, r21
 50c:	44 f4       	brge	.+16     	; 0x51e <ShowLetterTask+0x5e>
 50e:	80 91 42 01 	lds	r24, 0x0142
 512:	88 23       	and	r24, r24
 514:	21 f4       	brne	.+8      	; 0x51e <ShowLetterTask+0x5e>
		nextLetter=sentenceLetterIndex+1;
 516:	9b 01       	movw	r18, r22
 518:	2f 5f       	subi	r18, 0xFF	; 255
 51a:	3f 4f       	sbci	r19, 0xFF	; 255
 51c:	13 c0       	rjmp	.+38     	; 0x544 <ShowLetterTask+0x84>
	
	//For fetching next letter in right shift when current letter is the last one 
	else if(rightScrollingFlag==1)
 51e:	80 91 42 01 	lds	r24, 0x0142
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	19 f0       	breq	.+6      	; 0x52c <ShowLetterTask+0x6c>
 526:	20 e0       	ldi	r18, 0x00	; 0
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	03 c0       	rjmp	.+6      	; 0x532 <ShowLetterTask+0x72>
		nextLetter=sentenceLetterIndex+1;
 52c:	9b 01       	movw	r18, r22
 52e:	2f 5f       	subi	r18, 0xFF	; 255
 530:	3f 4f       	sbci	r19, 0xFF	; 255
		
	//For fetching next letter in right shift when current letter isn't the last one 
	if(sentenceLetterIndex==(sentenceSize-1) && rightScrollingFlag==1)
 532:	64 17       	cp	r22, r20
 534:	75 07       	cpc	r23, r21
 536:	31 f4       	brne	.+12     	; 0x544 <ShowLetterTask+0x84>
 538:	80 91 42 01 	lds	r24, 0x0142
 53c:	81 30       	cpi	r24, 0x01	; 1
 53e:	11 f4       	brne	.+4      	; 0x544 <ShowLetterTask+0x84>
 540:	20 e0       	ldi	r18, 0x00	; 0
 542:	30 e0       	ldi	r19, 0x00	; 0
		nextLetter=0;

	if(colShowSum==5)
 544:	e5 30       	cpi	r30, 0x05	; 5
 546:	f1 05       	cpc	r31, r1
 548:	11 f4       	brne	.+4      	; 0x54e <ShowLetterTask+0x8e>
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	37 c0       	rjmp	.+110    	; 0x5bc <ShowLetterTask+0xfc>
	{
		portbValue=0x00;
	}
	else if(colShowSum>5 && showColumnIndex<5)
 54e:	e6 30       	cpi	r30, 0x06	; 6
 550:	f1 05       	cpc	r31, r1
 552:	14 f1       	brlt	.+68     	; 0x598 <ShowLetterTask+0xd8>
 554:	c5 30       	cpi	r28, 0x05	; 5
 556:	d1 05       	cpc	r29, r1
 558:	fc f4       	brge	.+62     	; 0x598 <ShowLetterTask+0xd8>
	{
		if(sentence[nextLetter]<16)
 55a:	d9 01       	movw	r26, r18
 55c:	ae 54       	subi	r26, 0x4E	; 78
 55e:	bf 4f       	sbci	r27, 0xFF	; 255
 560:	8c 91       	ld	r24, X
 562:	80 31       	cpi	r24, 0x10	; 16
 564:	70 f4       	brcc	.+28     	; 0x582 <ShowLetterTask+0xc2>
			portbValue=userDefine[sentence[nextLetter]*5+(colShowSum-6)];
 566:	2c 91       	ld	r18, X
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	c9 01       	movw	r24, r18
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	82 0f       	add	r24, r18
 576:	93 1f       	adc	r25, r19
 578:	e8 0f       	add	r30, r24
 57a:	f9 1f       	adc	r31, r25
 57c:	e8 59       	subi	r30, 0x98	; 152
 57e:	fd 4f       	sbci	r31, 0xFD	; 253
 580:	16 c0       	rjmp	.+44     	; 0x5ae <ShowLetterTask+0xee>
		else
			portbValue=pgm_read_byte(&(rowArray[(sentence[nextLetter]*5)+(colShowSum-6)]));
 582:	8c 91       	ld	r24, X
 584:	25 e0       	ldi	r18, 0x05	; 5
 586:	82 9f       	mul	r24, r18
 588:	c0 01       	movw	r24, r0
 58a:	11 24       	eor	r1, r1
 58c:	e8 0f       	add	r30, r24
 58e:	f9 1f       	adc	r31, r25
 590:	e2 5b       	subi	r30, 0xB2	; 178
 592:	ff 4f       	sbci	r31, 0xFF	; 255
 594:	94 91       	lpm	r25, Z+
 596:	12 c0       	rjmp	.+36     	; 0x5bc <ShowLetterTask+0xfc>
void ShowLetterTask()
{
	char portbValue;
	int sentenceValue,colShowSum;
	int nextLetter=0;
	sentenceValue=(sentence[sentenceLetterIndex]*5);
 598:	85 e0       	ldi	r24, 0x05	; 5
 59a:	98 9f       	mul	r25, r24
 59c:	c0 01       	movw	r24, r0
 59e:	11 24       	eor	r1, r1
		else
			portbValue=pgm_read_byte(&(rowArray[(sentence[nextLetter]*5)+(colShowSum-6)]));
	}
	else
	{
		if(sentenceValue<16)
 5a0:	80 31       	cpi	r24, 0x10	; 16
 5a2:	91 05       	cpc	r25, r1
 5a4:	34 f4       	brge	.+12     	; 0x5b2 <ShowLetterTask+0xf2>
			portbValue=userDefine[sentenceValue+(colShowSum)];
 5a6:	e2 59       	subi	r30, 0x92	; 146
 5a8:	fd 4f       	sbci	r31, 0xFD	; 253
 5aa:	e8 0f       	add	r30, r24
 5ac:	f9 1f       	adc	r31, r25
 5ae:	90 81       	ld	r25, Z
 5b0:	05 c0       	rjmp	.+10     	; 0x5bc <ShowLetterTask+0xfc>
		else
			portbValue=pgm_read_byte(&(rowArray[sentenceValue+colShowSum]));
 5b2:	e8 0f       	add	r30, r24
 5b4:	f9 1f       	adc	r31, r25
 5b6:	ec 5a       	subi	r30, 0xAC	; 172
 5b8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ba:	94 91       	lpm	r25, Z+
	}
	PORTA=(PORTA&0xE0)|(colArray[showColumnIndex]&0x1F)|0b11100000;
 5bc:	8b b3       	in	r24, 0x1b	; 27
 5be:	c6 58       	subi	r28, 0x86	; 134
 5c0:	df 4f       	sbci	r29, 0xFF	; 255
 5c2:	88 81       	ld	r24, Y
 5c4:	80 6e       	ori	r24, 0xE0	; 224
 5c6:	8b bb       	out	0x1b, r24	; 27
	if(offFlag)
 5c8:	80 91 ae 00 	lds	r24, 0x00AE
 5cc:	88 23       	and	r24, r24
 5ce:	11 f0       	breq	.+4      	; 0x5d4 <ShowLetterTask+0x114>
		PORTB=0x00;
 5d0:	18 ba       	out	0x18, r1	; 24
 5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <ShowLetterTask+0x116>
	else
		PORTB=portbValue;
 5d4:	98 bb       	out	0x18, r25	; 24
}
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	08 95       	ret

000005dc <knobShowLetter>:
		//userDefine[j]=eeprom_read_byte(0x00A0+j);
}
void knobShowLetter(void)
{
	char temp;
	temp=pgm_read_byte(&(rowArray[knobColumnIndex*5+knobIndex]));
 5dc:	a0 91 ab 00 	lds	r26, 0x00AB
 5e0:	b0 e0       	ldi	r27, 0x00	; 0
 5e2:	e0 91 79 00 	lds	r30, 0x0079
 5e6:	85 e0       	ldi	r24, 0x05	; 5
 5e8:	e8 9f       	mul	r30, r24
 5ea:	f0 01       	movw	r30, r0
 5ec:	11 24       	eor	r1, r1
 5ee:	ea 0f       	add	r30, r26
 5f0:	fb 1f       	adc	r31, r27
 5f2:	ec 5a       	subi	r30, 0xAC	; 172
 5f4:	ff 4f       	sbci	r31, 0xFF	; 255
 5f6:	e4 91       	lpm	r30, Z+
	PORTA=(PORTA&0xE0)|(colArray[knobIndex]&0x1F)|0b11100000;
 5f8:	8b b3       	in	r24, 0x1b	; 27
 5fa:	a6 58       	subi	r26, 0x86	; 134
 5fc:	bf 4f       	sbci	r27, 0xFF	; 255
 5fe:	8c 91       	ld	r24, X
 600:	80 6e       	ori	r24, 0xE0	; 224
 602:	8b bb       	out	0x1b, r24	; 27
	PORTB=temp;
 604:	e8 bb       	out	0x18, r30	; 24
}
 606:	08 95       	ret

00000608 <initialPosition>:

void initialPosition()
{
	
	if(devicePosition==1)
 608:	80 91 7f 00 	lds	r24, 0x007F
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	29 f4       	brne	.+10     	; 0x61a <initialPosition+0x12>
    {
		columnIndex=0;
 610:	10 92 c9 02 	sts	0x02C9, r1
 614:	10 92 c8 02 	sts	0x02C8, r1
 618:	0a c0       	rjmp	.+20     	; 0x62e <initialPosition+0x26>
        sentenceLetterIndex=0;
           
    }
	else if(devicePosition==2)
 61a:	80 91 7f 00 	lds	r24, 0x007F
 61e:	82 30       	cpi	r24, 0x02	; 2
 620:	59 f4       	brne	.+22     	; 0x638 <initialPosition+0x30>
    {
		columnIndex=5;
 622:	85 e0       	ldi	r24, 0x05	; 5
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	90 93 c9 02 	sts	0x02C9, r25
 62a:	80 93 c8 02 	sts	0x02C8, r24
   		sentenceLetterIndex=0;
 62e:	10 92 c7 02 	sts	0x02C7, r1
 632:	10 92 c6 02 	sts	0x02C6, r1
 636:	08 95       	ret
    }
	else if(devicePosition>2)
 638:	80 91 7f 00 	lds	r24, 0x007F
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	c0 f0       	brcs	.+48     	; 0x670 <initialPosition+0x68>
    {
		columnIndex=(5-((int)(devicePosition)-2)%5);
 640:	80 91 7f 00 	lds	r24, 0x007F
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	25 e0       	ldi	r18, 0x05	; 5
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	02 97       	sbiw	r24, 0x02	; 2
 64c:	65 e0       	ldi	r22, 0x05	; 5
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	0e 94 7f 07 	call	0xefe	; 0xefe <__divmodhi4>
 654:	28 1b       	sub	r18, r24
 656:	39 0b       	sbc	r19, r25
 658:	30 93 c9 02 	sts	0x02C9, r19
 65c:	20 93 c8 02 	sts	0x02C8, r18
        sentenceLetterIndex=(int16_t)devicePosition-2;
 660:	80 91 7f 00 	lds	r24, 0x007F
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	02 97       	sbiw	r24, 0x02	; 2
 668:	90 93 c7 02 	sts	0x02C7, r25
 66c:	80 93 c6 02 	sts	0x02C6, r24
 670:	08 95       	ret

00000672 <userDefinesave>:
	{
		return (c-55);
	}
}
void userDefinesave(char inputText[])
{
 672:	af 92       	push	r10
 674:	bf 92       	push	r11
 676:	cf 92       	push	r12
 678:	df 92       	push	r13
 67a:	ef 92       	push	r14
 67c:	ff 92       	push	r15
 67e:	0f 93       	push	r16
 680:	1f 93       	push	r17
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	8c 01       	movw	r16, r24
	unsigned char charCode=0;
	unsigned char col=0;
	char i=4;
	char t=0;
	
	charCode=(char2hex(inputText[2]))*16+(char2hex(inputText[3]));
 688:	fc 01       	movw	r30, r24
 68a:	82 81       	ldd	r24, Z+2	; 0x02
 68c:	0e 94 02 02 	call	0x404	; 0x404 <char2hex>
 690:	f8 2e       	mov	r15, r24
 692:	f8 01       	movw	r30, r16
 694:	83 81       	ldd	r24, Z+3	; 0x03
 696:	0e 94 02 02 	call	0x404	; 0x404 <char2hex>
 69a:	f2 94       	swap	r15
 69c:	50 ef       	ldi	r21, 0xF0	; 240
 69e:	f5 22       	and	r15, r21
 6a0:	f8 0e       	add	r15, r24
 6a2:	58 01       	movw	r10, r16
 6a4:	85 e0       	ldi	r24, 0x05	; 5
 6a6:	f8 9e       	mul	r15, r24
 6a8:	60 01       	movw	r12, r0
 6aa:	11 24       	eor	r1, r1
 6ac:	8e e6       	ldi	r24, 0x6E	; 110
 6ae:	92 e0       	ldi	r25, 0x02	; 2
 6b0:	c8 0e       	add	r12, r24
 6b2:	d9 1e       	adc	r13, r25
 6b4:	c0 e0       	ldi	r28, 0x00	; 0
 6b6:	d0 e0       	ldi	r29, 0x00	; 0
	while(i<14)
	{
		col=char2hex(inputText[i])*16;
		col+=char2hex(inputText[i+1]);
		eeprom_write_byte(0x00A0+charCode+t,col);
 6b8:	ef 2c       	mov	r14, r15
 6ba:	ff 24       	eor	r15, r15
 6bc:	e0 ea       	ldi	r30, 0xA0	; 160
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	ee 0e       	add	r14, r30
 6c2:	ff 1e       	adc	r15, r31
	char t=0;
	
	charCode=(char2hex(inputText[2]))*16+(char2hex(inputText[3]));
	while(i<14)
	{
		col=char2hex(inputText[i])*16;
 6c4:	f5 01       	movw	r30, r10
 6c6:	84 81       	ldd	r24, Z+4	; 0x04
 6c8:	0e 94 02 02 	call	0x404	; 0x404 <char2hex>
 6cc:	18 2f       	mov	r17, r24
 6ce:	12 95       	swap	r17
 6d0:	10 7f       	andi	r17, 0xF0	; 240
		col+=char2hex(inputText[i+1]);
 6d2:	f5 01       	movw	r30, r10
 6d4:	85 81       	ldd	r24, Z+5	; 0x05
 6d6:	0e 94 02 02 	call	0x404	; 0x404 <char2hex>
 6da:	18 0f       	add	r17, r24
		eeprom_write_byte(0x00A0+charCode+t,col);
 6dc:	c7 01       	movw	r24, r14
 6de:	8c 0f       	add	r24, r28
 6e0:	9d 1f       	adc	r25, r29
 6e2:	61 2f       	mov	r22, r17
 6e4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__eewr_byte_m16>
		i+=2;
		userDefine[charCode*5+t]=col;
 6e8:	f6 01       	movw	r30, r12
 6ea:	11 93       	st	Z+, r17
 6ec:	6f 01       	movw	r12, r30
 6ee:	21 96       	adiw	r28, 0x01	; 1
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	a8 0e       	add	r10, r24
 6f6:	b9 1e       	adc	r11, r25
	unsigned char col=0;
	char i=4;
	char t=0;
	
	charCode=(char2hex(inputText[2]))*16+(char2hex(inputText[3]));
	while(i<14)
 6f8:	c5 30       	cpi	r28, 0x05	; 5
 6fa:	d1 05       	cpc	r29, r1
 6fc:	19 f7       	brne	.-58     	; 0x6c4 <userDefinesave+0x52>
		userDefine[charCode*5+t]=col;
		t++;
	}
	i=0;
	t=0;
}
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	1f 91       	pop	r17
 704:	0f 91       	pop	r16
 706:	ff 90       	pop	r15
 708:	ef 90       	pop	r14
 70a:	df 90       	pop	r13
 70c:	cf 90       	pop	r12
 70e:	bf 90       	pop	r11
 710:	af 90       	pop	r10
 712:	08 95       	ret

00000714 <loadingPreviousState>:

}
void loadingPreviousState(void)
{
	char i,j;
	sentenceSize=eeprom_read_byte(0x000A);
 714:	8a e0       	ldi	r24, 0x0A	; 10
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__eerd_byte_m16>
 71c:	48 2f       	mov	r20, r24
 71e:	80 93 41 01 	sts	0x0141, r24
	eeprom_read_block((char *)&sentence,0x0010,sentenceSize);
 722:	82 eb       	ldi	r24, 0xB2	; 178
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	60 e1       	ldi	r22, 0x10	; 16
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	50 e0       	ldi	r21, 0x00	; 0
 72c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__eerd_block_m16>
	if(eeprom_read_byte(0x0002)!=0 && eeprom_read_byte(0x0002)!=1)
 730:	82 e0       	ldi	r24, 0x02	; 2
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__eerd_byte_m16>
 738:	88 23       	and	r24, r24
 73a:	41 f0       	breq	.+16     	; 0x74c <loadingPreviousState+0x38>
 73c:	81 30       	cpi	r24, 0x01	; 1
 73e:	31 f0       	breq	.+12     	; 0x74c <loadingPreviousState+0x38>
		eeprom_write_byte(0x0002,0);
 740:	82 e0       	ldi	r24, 0x02	; 2
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	60 e0       	ldi	r22, 0x00	; 0
 746:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__eewr_byte_m16>
 74a:	02 c0       	rjmp	.+4      	; 0x750 <loadingPreviousState+0x3c>
	else
		rightScrollingFlag=eeprom_read_byte(0x0002);
 74c:	80 93 42 01 	sts	0x0142, r24

	if(eeprom_read_byte(0x0004)!=0 && eeprom_read_byte(0x0004)!=1)
 750:	84 e0       	ldi	r24, 0x04	; 4
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__eerd_byte_m16>
 758:	88 23       	and	r24, r24
 75a:	41 f0       	breq	.+16     	; 0x76c <loadingPreviousState+0x58>
 75c:	81 30       	cpi	r24, 0x01	; 1
 75e:	31 f0       	breq	.+12     	; 0x76c <loadingPreviousState+0x58>
		eeprom_write_byte(0x0004,1);
 760:	84 e0       	ldi	r24, 0x04	; 4
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	61 e0       	ldi	r22, 0x01	; 1
 766:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__eewr_byte_m16>
 76a:	02 c0       	rjmp	.+4      	; 0x770 <loadingPreviousState+0x5c>
	else
		columnScrollFlag=eeprom_read_byte(0x0004);
 76c:	80 93 80 00 	sts	0x0080, r24
	if(eeprom_read_byte(0x0006)<10)
 770:	86 e0       	ldi	r24, 0x06	; 6
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__eerd_byte_m16>
 778:	8a 30       	cpi	r24, 0x0A	; 10
 77a:	40 f4       	brcc	.+16     	; 0x78c <loadingPreviousState+0x78>
		eeprom_write_word(0x0006,scrollSpeed);
 77c:	60 91 81 00 	lds	r22, 0x0081
 780:	70 91 82 00 	lds	r23, 0x0082
 784:	86 e0       	ldi	r24, 0x06	; 6
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__eewr_word_m16>
 78c:	08 95       	ret

0000078e <getCommand>:
		PORTB=0x00;
	else
		PORTB=portbValue;
}
void getCommand(char inputText[],char index)
{
 78e:	0f 93       	push	r16
 790:	1f 93       	push	r17
 792:	fc 01       	movw	r30, r24
	int speed;
	configAddressFlag=0;
 794:	10 92 83 00 	sts	0x0083, r1
	switch(inputText[1])
 798:	81 81       	ldd	r24, Z+1	; 0x01
 79a:	86 33       	cpi	r24, 0x36	; 54
 79c:	d1 f1       	breq	.+116    	; 0x812 <getCommand+0x84>
 79e:	87 33       	cpi	r24, 0x37	; 55
 7a0:	70 f4       	brcc	.+28     	; 0x7be <getCommand+0x30>
 7a2:	82 33       	cpi	r24, 0x32	; 50
 7a4:	19 f1       	breq	.+70     	; 0x7ec <getCommand+0x5e>
 7a6:	83 33       	cpi	r24, 0x33	; 51
 7a8:	20 f4       	brcc	.+8      	; 0x7b2 <getCommand+0x24>
 7aa:	81 33       	cpi	r24, 0x31	; 49
 7ac:	09 f0       	breq	.+2      	; 0x7b0 <getCommand+0x22>
 7ae:	69 c0       	rjmp	.+210    	; 0x882 <getCommand+0xf4>
 7b0:	19 c0       	rjmp	.+50     	; 0x7e4 <getCommand+0x56>
 7b2:	83 33       	cpi	r24, 0x33	; 51
 7b4:	01 f1       	breq	.+64     	; 0x7f6 <getCommand+0x68>
 7b6:	85 33       	cpi	r24, 0x35	; 53
 7b8:	09 f0       	breq	.+2      	; 0x7bc <getCommand+0x2e>
 7ba:	63 c0       	rjmp	.+198    	; 0x882 <getCommand+0xf4>
 7bc:	21 c0       	rjmp	.+66     	; 0x800 <getCommand+0x72>
 7be:	81 34       	cpi	r24, 0x41	; 65
 7c0:	09 f4       	brne	.+2      	; 0x7c4 <getCommand+0x36>
 7c2:	54 c0       	rjmp	.+168    	; 0x86c <getCommand+0xde>
 7c4:	82 34       	cpi	r24, 0x42	; 66
 7c6:	38 f4       	brcc	.+14     	; 0x7d6 <getCommand+0x48>
 7c8:	88 33       	cpi	r24, 0x38	; 56
 7ca:	09 f4       	brne	.+2      	; 0x7ce <getCommand+0x40>
 7cc:	41 c0       	rjmp	.+130    	; 0x850 <getCommand+0xc2>
 7ce:	89 33       	cpi	r24, 0x39	; 57
 7d0:	09 f0       	breq	.+2      	; 0x7d4 <getCommand+0x46>
 7d2:	57 c0       	rjmp	.+174    	; 0x882 <getCommand+0xf4>
 7d4:	41 c0       	rjmp	.+130    	; 0x858 <getCommand+0xca>
 7d6:	82 34       	cpi	r24, 0x42	; 66
 7d8:	09 f4       	brne	.+2      	; 0x7dc <getCommand+0x4e>
 7da:	4b c0       	rjmp	.+150    	; 0x872 <getCommand+0xe4>
 7dc:	83 34       	cpi	r24, 0x43	; 67
 7de:	09 f0       	breq	.+2      	; 0x7e2 <getCommand+0x54>
 7e0:	50 c0       	rjmp	.+160    	; 0x882 <getCommand+0xf4>
 7e2:	4b c0       	rjmp	.+150    	; 0x87a <getCommand+0xec>
	{
		case '1'://Right shift
			userDefinesave(inputText);
 7e4:	cf 01       	movw	r24, r30
 7e6:	0e 94 39 03 	call	0x672	; 0x672 <userDefinesave>
 7ea:	4b c0       	rjmp	.+150    	; 0x882 <getCommand+0xf4>
			break;
		case '2'://Right shift
			initialPosition();
 7ec:	0e 94 04 03 	call	0x608	; 0x608 <initialPosition>
			eeprom_write_byte(0x0002,1);
 7f0:	82 e0       	ldi	r24, 0x02	; 2
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0c c0       	rjmp	.+24     	; 0x80e <getCommand+0x80>
			ShowLetterTask();
			break;
		case '3'://left shift
			initialPosition();
 7f6:	0e 94 04 03 	call	0x608	; 0x608 <initialPosition>
			eeprom_write_byte(0x0002,0);
 7fa:	82 e0       	ldi	r24, 0x02	; 2
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	32 c0       	rjmp	.+100    	; 0x864 <getCommand+0xd6>
			ShowLetterTask();
			break;
		case '5'://Resume
			syncStartFlag=1;
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	80 93 3e 01 	sts	0x013E, r24
			columnScrollFlag=1;
 806:	80 93 80 00 	sts	0x0080, r24
			eeprom_write_byte(0x0004,1);
 80a:	84 e0       	ldi	r24, 0x04	; 4
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	61 e0       	ldi	r22, 0x01	; 1
 810:	2a c0       	rjmp	.+84     	; 0x866 <getCommand+0xd8>
			ShowLetterTask();
			break;
		case '6'://Speed
			syncStartFlag=0;
 812:	10 92 3e 01 	sts	0x013E, r1
			speed=(inputText[2]-48)*100+(inputText[3]-48)*10+(inputText[4]-48);
 816:	04 81       	ldd	r16, Z+4	; 0x04
 818:	10 e0       	ldi	r17, 0x00	; 0
 81a:	00 5d       	subi	r16, 0xD0	; 208
 81c:	14 41       	sbci	r17, 0x14	; 20
 81e:	82 81       	ldd	r24, Z+2	; 0x02
 820:	24 e6       	ldi	r18, 0x64	; 100
 822:	82 9f       	mul	r24, r18
 824:	c0 01       	movw	r24, r0
 826:	11 24       	eor	r1, r1
 828:	08 0f       	add	r16, r24
 82a:	19 1f       	adc	r17, r25
 82c:	83 81       	ldd	r24, Z+3	; 0x03
 82e:	2a e0       	ldi	r18, 0x0A	; 10
 830:	82 9f       	mul	r24, r18
 832:	c0 01       	movw	r24, r0
 834:	11 24       	eor	r1, r1
 836:	08 0f       	add	r16, r24
 838:	19 1f       	adc	r17, r25
			initialPosition();
 83a:	0e 94 04 03 	call	0x608	; 0x608 <initialPosition>
			eeprom_write_word(0x0006,speed);
 83e:	86 e0       	ldi	r24, 0x06	; 6
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	b8 01       	movw	r22, r16
 844:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__eewr_word_m16>
			syncStartFlag=1;
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	80 93 3e 01 	sts	0x013E, r24
 84e:	19 c0       	rjmp	.+50     	; 0x882 <getCommand+0xf4>
			break;

		case '8'://Downloading the message
			messageGettingUSART(inputText,index);
 850:	cf 01       	movw	r24, r30
 852:	0e 94 44 04 	call	0x888	; 0x888 <messageGettingUSART>
 856:	13 c0       	rjmp	.+38     	; 0x87e <getCommand+0xf0>
			ShowLetterTask();
			break;
		case '9'://stop
			syncStartFlag=0;
 858:	10 92 3e 01 	sts	0x013E, r1
			columnScrollFlag=0;
 85c:	10 92 80 00 	sts	0x0080, r1
			eeprom_write_byte(0x0004,0);
 860:	84 e0       	ldi	r24, 0x04	; 4
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	60 e0       	ldi	r22, 0x00	; 0
 866:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__eewr_byte_m16>
 86a:	09 c0       	rjmp	.+18     	; 0x87e <getCommand+0xf0>
			ShowLetterTask();
			break;
		case 'A'://Return
			initialPosition();
 86c:	0e 94 04 03 	call	0x608	; 0x608 <initialPosition>
 870:	06 c0       	rjmp	.+12     	; 0x87e <getCommand+0xf0>
			ShowLetterTask();
			break;
		case 'B'://Off
			offFlag=1;
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	80 93 ae 00 	sts	0x00AE, r24
 878:	02 c0       	rjmp	.+4      	; 0x87e <getCommand+0xf0>
			ShowLetterTask();
			break;
		case 'C'://On
			offFlag=0;
 87a:	10 92 ae 00 	sts	0x00AE, r1
			ShowLetterTask();
 87e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <ShowLetterTask>
			break;
		default:
			break;
	}

}
 882:	1f 91       	pop	r17
 884:	0f 91       	pop	r16
 886:	08 95       	ret

00000888 <messageGettingUSART>:
		interrupt_i2c();
}
 

void messageGettingUSART(char inputText[],char index)
{
 888:	ef 92       	push	r14
 88a:	ff 92       	push	r15
 88c:	0f 93       	push	r16
 88e:	1f 93       	push	r17
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	e6 2e       	mov	r14, r22

	configAddressFlag=0;
 896:	10 92 83 00 	sts	0x0083, r1
 89a:	8c 01       	movw	r16, r24
 89c:	62 e0       	ldi	r22, 0x02	; 2
 89e:	f6 2e       	mov	r15, r22
 8a0:	c0 e1       	ldi	r28, 0x10	; 16
 8a2:	d0 e0       	ldi	r29, 0x00	; 0
 8a4:	07 c0       	rjmp	.+14     	; 0x8b4 <messageGettingUSART+0x2c>

	char i;
	for(i=2;i<index;i++)
	{
		eeprom_write_byte(0x0010+i-2,inputText[i]);
 8a6:	ce 01       	movw	r24, r28
 8a8:	f8 01       	movw	r30, r16
 8aa:	61 81       	ldd	r22, Z+1	; 0x01
 8ac:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__eewr_byte_m16>
{

	configAddressFlag=0;

	char i;
	for(i=2;i<index;i++)
 8b0:	f3 94       	inc	r15
 8b2:	21 96       	adiw	r28, 0x01	; 1
 8b4:	0f 5f       	subi	r16, 0xFF	; 255
 8b6:	1f 4f       	sbci	r17, 0xFF	; 255
 8b8:	fe 14       	cp	r15, r14
 8ba:	a8 f3       	brcs	.-22     	; 0x8a6 <messageGettingUSART+0x1e>
	{
		eeprom_write_byte(0x0010+i-2,inputText[i]);
	}
	sentenceSize=index-2;
 8bc:	6e 2d       	mov	r22, r14
 8be:	62 50       	subi	r22, 0x02	; 2
 8c0:	60 93 41 01 	sts	0x0141, r22
	eeprom_write_byte(0x000A,sentenceSize);
 8c4:	8a e0       	ldi	r24, 0x0A	; 10
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__eewr_byte_m16>
	sentenceSize=eeprom_read_byte(0x000A);
 8cc:	8a e0       	ldi	r24, 0x0A	; 10
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__eerd_byte_m16>
 8d4:	48 2f       	mov	r20, r24
 8d6:	80 93 41 01 	sts	0x0141, r24
	eeprom_read_block(&sentence,0x0010,sentenceSize);
 8da:	82 eb       	ldi	r24, 0xB2	; 178
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	60 e1       	ldi	r22, 0x10	; 16
 8e0:	70 e0       	ldi	r23, 0x00	; 0
 8e2:	50 e0       	ldi	r21, 0x00	; 0
 8e4:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__eerd_block_m16>
	showColumnIndex=0;
 8e8:	10 92 a9 00 	sts	0x00A9, r1
 8ec:	10 92 a8 00 	sts	0x00A8, r1

	//Giving initializing commands
	getCommand("09",2);//Stop
 8f0:	80 e6       	ldi	r24, 0x60	; 96
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	62 e0       	ldi	r22, 0x02	; 2
 8f6:	0e 94 c7 03 	call	0x78e	; 0x78e <getCommand>
	initialPosition();//Initial position
 8fa:	0e 94 04 03 	call	0x608	; 0x608 <initialPosition>
	getCommand("06010",5);//Setting the speed as default
 8fe:	83 e6       	ldi	r24, 0x63	; 99
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	65 e0       	ldi	r22, 0x05	; 5
 904:	0e 94 c7 03 	call	0x78e	; 0x78e <getCommand>

	getCommand("0A",2);//Return back to first
 908:	89 e6       	ldi	r24, 0x69	; 105
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	62 e0       	ldi	r22, 0x02	; 2
 90e:	0e 94 c7 03 	call	0x78e	; 0x78e <getCommand>
	getCommand("05",2);//Start shifting
 912:	8c e6       	ldi	r24, 0x6C	; 108
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	62 e0       	ldi	r22, 0x02	; 2
 918:	0e 94 c7 03 	call	0x78e	; 0x78e <getCommand>
	
	//TIMSK=0x10;
}
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	1f 91       	pop	r17
 922:	0f 91       	pop	r16
 924:	ff 90       	pop	r15
 926:	ef 90       	pop	r14
 928:	08 95       	ret

0000092a <__vector_17>:
		}
	}
}

ISR(TWI_vect)
{
 92a:	1f 92       	push	r1
 92c:	0f 92       	push	r0
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	0f 92       	push	r0
 932:	11 24       	eor	r1, r1
 934:	2f 93       	push	r18
 936:	3f 93       	push	r19
 938:	4f 93       	push	r20
 93a:	5f 93       	push	r21
 93c:	6f 93       	push	r22
 93e:	7f 93       	push	r23
 940:	8f 93       	push	r24
 942:	9f 93       	push	r25
 944:	af 93       	push	r26
 946:	bf 93       	push	r27
 948:	ef 93       	push	r30
 94a:	ff 93       	push	r31
	if(configAddressFlag)
 94c:	80 91 83 00 	lds	r24, 0x0083
 950:	88 23       	and	r24, r24
 952:	39 f0       	breq	.+14     	; 0x962 <__vector_17+0x38>
	{
        devicePosition=interrupt_config_i2c();
 954:	0e 94 d4 06 	call	0xda8	; 0xda8 <interrupt_config_i2c>
 958:	80 93 7f 00 	sts	0x007F, r24
       	initialPosition();
 95c:	0e 94 04 03 	call	0x608	; 0x608 <initialPosition>
 960:	02 c0       	rjmp	.+4      	; 0x966 <__vector_17+0x3c>
	}
	else
		interrupt_i2c();
 962:	0e 94 73 06 	call	0xce6	; 0xce6 <interrupt_i2c>
}
 966:	ff 91       	pop	r31
 968:	ef 91       	pop	r30
 96a:	bf 91       	pop	r27
 96c:	af 91       	pop	r26
 96e:	9f 91       	pop	r25
 970:	8f 91       	pop	r24
 972:	7f 91       	pop	r23
 974:	6f 91       	pop	r22
 976:	5f 91       	pop	r21
 978:	4f 91       	pop	r20
 97a:	3f 91       	pop	r19
 97c:	2f 91       	pop	r18
 97e:	0f 90       	pop	r0
 980:	0f be       	out	0x3f, r0	; 63
 982:	0f 90       	pop	r0
 984:	1f 90       	pop	r1
 986:	18 95       	reti

00000988 <__vector_6>:
			inputText[index++]=Rev;
		}
	}
}
ISR(TIMER1_COMPA_vect)
{
 988:	1f 92       	push	r1
 98a:	0f 92       	push	r0
 98c:	0f b6       	in	r0, 0x3f	; 63
 98e:	0f 92       	push	r0
 990:	11 24       	eor	r1, r1
 992:	1f 93       	push	r17
 994:	2f 93       	push	r18
 996:	3f 93       	push	r19
 998:	4f 93       	push	r20
 99a:	5f 93       	push	r21
 99c:	6f 93       	push	r22
 99e:	7f 93       	push	r23
 9a0:	8f 93       	push	r24
 9a2:	9f 93       	push	r25
 9a4:	af 93       	push	r26
 9a6:	bf 93       	push	r27
 9a8:	ef 93       	push	r30
 9aa:	ff 93       	push	r31
	static char prevSendButton=0;
	char currSendButton;
	if(configStatingFlag)
 9ac:	80 91 3f 01 	lds	r24, 0x013F
 9b0:	88 23       	and	r24, r24
 9b2:	29 f0       	breq	.+10     	; 0x9be <__vector_6+0x36>
		configTimeoutCounter++;
 9b4:	80 91 c0 02 	lds	r24, 0x02C0
 9b8:	8f 5f       	subi	r24, 0xFF	; 255
 9ba:	80 93 c0 02 	sts	0x02C0, r24
	knobCounter++;
 9be:	80 91 43 01 	lds	r24, 0x0143
 9c2:	90 91 44 01 	lds	r25, 0x0144
 9c6:	01 96       	adiw	r24, 0x01	; 1
 9c8:	90 93 44 01 	sts	0x0144, r25
 9cc:	80 93 43 01 	sts	0x0143, r24
	if(!(PINC&0b10000000))
 9d0:	9f 99       	sbic	0x13, 7	; 19
 9d2:	12 c0       	rjmp	.+36     	; 0x9f8 <__vector_6+0x70>
	{
		if(knobCounter>350)
 9d4:	8f 55       	subi	r24, 0x5F	; 95
 9d6:	91 40       	sbci	r25, 0x01	; 1
 9d8:	88 f0       	brcs	.+34     	; 0x9fc <__vector_6+0x74>
		{
			
			knobCounter=0;
 9da:	10 92 44 01 	sts	0x0144, r1
 9de:	10 92 43 01 	sts	0x0143, r1
			knobFlag=1;
 9e2:	81 e0       	ldi	r24, 0x01	; 1
 9e4:	80 93 aa 00 	sts	0x00AA, r24


void adc_start_conversion()
{
	//set ADC channel
	ADMUX=(ADMUX&0xF0)|0x07;
 9e8:	87 b1       	in	r24, 0x07	; 7
 9ea:	80 7f       	andi	r24, 0xF0	; 240
 9ec:	87 60       	ori	r24, 0x07	; 7
 9ee:	87 b9       	out	0x07, r24	; 7
	//Start conversion with Interrupt after conversion
	//enable global interrupts
	ADCSRA |= (1<<ADSC)|(1<<ADIE);
 9f0:	86 b1       	in	r24, 0x06	; 6
 9f2:	88 64       	ori	r24, 0x48	; 72
 9f4:	86 b9       	out	0x06, r24	; 6
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <__vector_6+0x74>
			adc_start_conversion();		
				
		}
	}
	else
		knobFlag=0;
 9f8:	10 92 aa 00 	sts	0x00AA, r1
	currSendButton=bit_is_clear(PINC,5);
 9fc:	83 b3       	in	r24, 0x13	; 19
 9fe:	82 95       	swap	r24
 a00:	86 95       	lsr	r24
 a02:	87 70       	andi	r24, 0x07	; 7
 a04:	80 95       	com	r24
	if (currSendButton && !prevSendButton && knobSize>0)
 a06:	18 2f       	mov	r17, r24
 a08:	11 70       	andi	r17, 0x01	; 1
 a0a:	80 ff       	sbrs	r24, 0
 a0c:	2b c0       	rjmp	.+86     	; 0xa64 <__vector_6+0xdc>
 a0e:	80 91 45 01 	lds	r24, 0x0145
 a12:	88 23       	and	r24, r24
 a14:	39 f5       	brne	.+78     	; 0xa64 <__vector_6+0xdc>
 a16:	80 91 84 00 	lds	r24, 0x0084
 a1a:	88 23       	and	r24, r24
 a1c:	19 f1       	breq	.+70     	; 0xa64 <__vector_6+0xdc>
	{
		Usart_PutString("Sending:");
 a1e:	8f e6       	ldi	r24, 0x6F	; 111
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	0e 94 75 07 	call	0xeea	; 0xeea <Usart_PutString>
		knobSentence[knobSize++]='&';
 a26:	90 91 84 00 	lds	r25, 0x0084
 a2a:	e9 2f       	mov	r30, r25
 a2c:	f0 e0       	ldi	r31, 0x00	; 0
 a2e:	ee 51       	subi	r30, 0x1E	; 30
 a30:	fe 4f       	sbci	r31, 0xFE	; 254
 a32:	86 e2       	ldi	r24, 0x26	; 38
 a34:	80 83       	st	Z, r24
 a36:	9f 5f       	subi	r25, 0xFF	; 255
 a38:	90 93 84 00 	sts	0x0084, r25
		SIZE = knobSize;
 a3c:	90 93 c5 02 	sts	0x02C5, r25
		strcpy(i2cSendMessageBuf,knobSentence);
 a40:	8a ec       	ldi	r24, 0xCA	; 202
 a42:	92 e0       	ldi	r25, 0x02	; 2
 a44:	62 ee       	ldi	r22, 0xE2	; 226
 a46:	71 e0       	ldi	r23, 0x01	; 1
 a48:	0e 94 a6 07 	call	0xf4c	; 0xf4c <strcpy>
		syncStartFlag=0;
 a4c:	10 92 3e 01 	sts	0x013E, r1
		TWCR = (1<<TWINT)|(1<<TWEN)| _BV(TWSTA)|(1<<TWEA)|(1<<TWIE);
 a50:	85 ee       	ldi	r24, 0xE5	; 229
 a52:	86 bf       	out	0x36, r24	; 54
		getCommand(knobSentence,knobSize);
 a54:	82 ee       	ldi	r24, 0xE2	; 226
 a56:	91 e0       	ldi	r25, 0x01	; 1
 a58:	60 91 84 00 	lds	r22, 0x0084
 a5c:	0e 94 c7 03 	call	0x78e	; 0x78e <getCommand>
		knobSize=0;
 a60:	10 92 84 00 	sts	0x0084, r1
	}
	prevSendButton=currSendButton;
 a64:	10 93 45 01 	sts	0x0145, r17

	if(configTimeoutCounter>200)
 a68:	80 91 c0 02 	lds	r24, 0x02C0
 a6c:	89 3c       	cpi	r24, 0xC9	; 201
 a6e:	48 f0       	brcs	.+18     	; 0xa82 <__vector_6+0xfa>
	{
		configTimeoutCounter=0;
 a70:	10 92 c0 02 	sts	0x02C0, r1
		configAddressFlag=0;
 a74:	10 92 83 00 	sts	0x0083, r1
		syncStartFlag=1;
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	80 93 3e 01 	sts	0x013E, r24
		configStatingFlag=0;
 a7e:	10 92 3f 01 	sts	0x013F, r1
	} 
	if(offFlag==0)
 a82:	80 91 ae 00 	lds	r24, 0x00AE
 a86:	88 23       	and	r24, r24
 a88:	09 f0       	breq	.+2      	; 0xa8c <__vector_6+0x104>
 a8a:	66 c0       	rjmp	.+204    	; 0xb58 <__vector_6+0x1d0>
	{
		rightScrollingFlag=eeprom_read_byte(0x0002);
 a8c:	82 e0       	ldi	r24, 0x02	; 2
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__eerd_byte_m16>
 a94:	80 93 42 01 	sts	0x0142, r24
		columnScrollFlag=eeprom_read_byte(0x0004);
 a98:	84 e0       	ldi	r24, 0x04	; 4
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__eerd_byte_m16>
 aa0:	18 2f       	mov	r17, r24
 aa2:	80 93 80 00 	sts	0x0080, r24
		if(!knobFlag)
 aa6:	80 91 aa 00 	lds	r24, 0x00AA
 aaa:	88 23       	and	r24, r24
 aac:	09 f0       	breq	.+2      	; 0xab0 <__vector_6+0x128>
 aae:	49 c0       	rjmp	.+146    	; 0xb42 <__vector_6+0x1ba>
		{
			sentenceSize=eeprom_read_byte(0x000A);
 ab0:	8a e0       	ldi	r24, 0x0A	; 10
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__eerd_byte_m16>
 ab8:	80 93 41 01 	sts	0x0141, r24
			if(sentenceSize>0 && sentenceSize<140)
 abc:	81 50       	subi	r24, 0x01	; 1
 abe:	8b 38       	cpi	r24, 0x8B	; 139
 ac0:	08 f0       	brcs	.+2      	; 0xac4 <__vector_6+0x13c>
 ac2:	4a c0       	rjmp	.+148    	; 0xb58 <__vector_6+0x1d0>
			{
				if(columnScrollFlag && syncStartFlag)
 ac4:	11 23       	and	r17, r17
 ac6:	69 f0       	breq	.+26     	; 0xae2 <__vector_6+0x15a>
 ac8:	80 91 3e 01 	lds	r24, 0x013E
 acc:	88 23       	and	r24, r24
 ace:	49 f0       	breq	.+18     	; 0xae2 <__vector_6+0x15a>
				{
					scrollColumnTaskTime++;
 ad0:	80 91 b0 00 	lds	r24, 0x00B0
 ad4:	90 91 b1 00 	lds	r25, 0x00B1
 ad8:	01 96       	adiw	r24, 0x01	; 1
 ada:	90 93 b1 00 	sts	0x00B1, r25
 ade:	80 93 b0 00 	sts	0x00B0, r24
				}
				ShowLetterTask();
 ae2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <ShowLetterTask>
				showColumnIndex++;
 ae6:	80 91 a8 00 	lds	r24, 0x00A8
 aea:	90 91 a9 00 	lds	r25, 0x00A9
 aee:	01 96       	adiw	r24, 0x01	; 1
 af0:	90 93 a9 00 	sts	0x00A9, r25
 af4:	80 93 a8 00 	sts	0x00A8, r24
				if(showColumnIndex==5)
 af8:	05 97       	sbiw	r24, 0x05	; 5
 afa:	21 f4       	brne	.+8      	; 0xb04 <__vector_6+0x17c>
					showColumnIndex=0;
 afc:	10 92 a9 00 	sts	0x00A9, r1
 b00:	10 92 a8 00 	sts	0x00A8, r1
				if(scrollColumnTaskTime == scrollSpeed*8)    // 10ms passed, shifting the columns 
 b04:	20 91 b0 00 	lds	r18, 0x00B0
 b08:	30 91 b1 00 	lds	r19, 0x00B1
 b0c:	80 91 81 00 	lds	r24, 0x0081
 b10:	90 91 82 00 	lds	r25, 0x0082
 b14:	73 e0       	ldi	r23, 0x03	; 3
 b16:	88 0f       	add	r24, r24
 b18:	99 1f       	adc	r25, r25
 b1a:	7a 95       	dec	r23
 b1c:	e1 f7       	brne	.-8      	; 0xb16 <__vector_6+0x18e>
 b1e:	28 17       	cp	r18, r24
 b20:	39 07       	cpc	r19, r25
 b22:	d1 f4       	brne	.+52     	; 0xb58 <__vector_6+0x1d0>
				{
					scrollSpeed=eeprom_read_byte(0x0006);
 b24:	86 e0       	ldi	r24, 0x06	; 6
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__eerd_byte_m16>
 b2c:	80 93 81 00 	sts	0x0081, r24
 b30:	10 92 82 00 	sts	0x0082, r1
					ScrollColumnTask();
 b34:	0e 94 0b 02 	call	0x416	; 0x416 <ScrollColumnTask>
					scrollColumnTaskTime=0;
 b38:	10 92 b1 00 	sts	0x00B1, r1
 b3c:	10 92 b0 00 	sts	0x00B0, r1
 b40:	0b c0       	rjmp	.+22     	; 0xb58 <__vector_6+0x1d0>
				} 
			}
		}
		else
		{
			knobShowLetter();
 b42:	0e 94 ee 02 	call	0x5dc	; 0x5dc <knobShowLetter>
			knobIndex++;
 b46:	80 91 ab 00 	lds	r24, 0x00AB
 b4a:	8f 5f       	subi	r24, 0xFF	; 255
 b4c:	80 93 ab 00 	sts	0x00AB, r24
			if(knobIndex==5)
 b50:	85 30       	cpi	r24, 0x05	; 5
 b52:	11 f4       	brne	.+4      	; 0xb58 <__vector_6+0x1d0>
				knobIndex=0;
 b54:	10 92 ab 00 	sts	0x00AB, r1
		}
	}
}
 b58:	ff 91       	pop	r31
 b5a:	ef 91       	pop	r30
 b5c:	bf 91       	pop	r27
 b5e:	af 91       	pop	r26
 b60:	9f 91       	pop	r25
 b62:	8f 91       	pop	r24
 b64:	7f 91       	pop	r23
 b66:	6f 91       	pop	r22
 b68:	5f 91       	pop	r21
 b6a:	4f 91       	pop	r20
 b6c:	3f 91       	pop	r19
 b6e:	2f 91       	pop	r18
 b70:	1f 91       	pop	r17
 b72:	0f 90       	pop	r0
 b74:	0f be       	out	0x3f, r0	; 63
 b76:	0f 90       	pop	r0
 b78:	1f 90       	pop	r1
 b7a:	18 95       	reti

00000b7c <__vector_11>:
		}
	}
}

ISR(USART_RXC_vect )
{
 b7c:	1f 92       	push	r1
 b7e:	0f 92       	push	r0
 b80:	0f b6       	in	r0, 0x3f	; 63
 b82:	0f 92       	push	r0
 b84:	11 24       	eor	r1, r1
 b86:	2f 93       	push	r18
 b88:	3f 93       	push	r19
 b8a:	4f 93       	push	r20
 b8c:	5f 93       	push	r21
 b8e:	6f 93       	push	r22
 b90:	7f 93       	push	r23
 b92:	8f 93       	push	r24
 b94:	9f 93       	push	r25
 b96:	af 93       	push	r26
 b98:	bf 93       	push	r27
 b9a:	cf 93       	push	r28
 b9c:	df 93       	push	r29
 b9e:	ef 93       	push	r30
 ba0:	ff 93       	push	r31
	unsigned char Rev;
	int i;
	static unsigned char index=0;
	static char inputText[150]={0};
	Rev=UDR;
 ba2:	2c b1       	in	r18, 0x0c	; 12
	sei();
 ba4:	78 94       	sei
 ba6:	90 91 dc 01 	lds	r25, 0x01DC
	if(Rev==38 || Rev=='&')//Checking the end character '&'
 baa:	26 32       	cpi	r18, 0x26	; 38
 bac:	a9 f4       	brne	.+42     	; 0xbd8 <__vector_11+0x5c>
	{
		//Preparing buffer and size value for sending the message
		SIZE = index;
 bae:	90 93 c5 02 	sts	0x02C5, r25
		strcpy(i2cSendMessageBuf,inputText);
 bb2:	8a ec       	ldi	r24, 0xCA	; 202
 bb4:	92 e0       	ldi	r25, 0x02	; 2
 bb6:	66 e4       	ldi	r22, 0x46	; 70
 bb8:	71 e0       	ldi	r23, 0x01	; 1
 bba:	0e 94 a6 07 	call	0xf4c	; 0xf4c <strcpy>
		syncStartFlag=0;
 bbe:	10 92 3e 01 	sts	0x013E, r1
		TWCR = (1<<TWINT)|(1<<TWEN)| _BV(TWSTA)|(1<<TWEA)|(1<<TWIE);
 bc2:	85 ee       	ldi	r24, 0xE5	; 229
 bc4:	86 bf       	out	0x36, r24	; 54
		getCommand(inputText,index);
 bc6:	86 e4       	ldi	r24, 0x46	; 70
 bc8:	91 e0       	ldi	r25, 0x01	; 1
 bca:	60 91 dc 01 	lds	r22, 0x01DC
 bce:	0e 94 c7 03 	call	0x78e	; 0x78e <getCommand>
		index=0;
 bd2:	10 92 dc 01 	sts	0x01DC, r1
 bd6:	23 c0       	rjmp	.+70     	; 0xc1e <__vector_11+0xa2>
	}
	else
	{
		if(inputText[index-1]=='^')
 bd8:	e9 2f       	mov	r30, r25
 bda:	f0 e0       	ldi	r31, 0x00	; 0
 bdc:	ea 5b       	subi	r30, 0xBA	; 186
 bde:	fe 4f       	sbci	r31, 0xFE	; 254
 be0:	82 91       	ld	r24, -Z
 be2:	31 96       	adiw	r30, 0x01	; 1
 be4:	8e 35       	cpi	r24, 0x5E	; 94
 be6:	b9 f4       	brne	.+46     	; 0xc16 <__vector_11+0x9a>
		{
			index-=1;
 be8:	89 2f       	mov	r24, r25
 bea:	81 50       	subi	r24, 0x01	; 1
 bec:	80 93 dc 01 	sts	0x01DC, r24
			inputText[index]=(char2hex(Rev));
 bf0:	c8 2f       	mov	r28, r24
 bf2:	d0 e0       	ldi	r29, 0x00	; 0
 bf4:	82 2f       	mov	r24, r18
 bf6:	0e 94 02 02 	call	0x404	; 0x404 <char2hex>
 bfa:	fe 01       	movw	r30, r28
 bfc:	ea 5b       	subi	r30, 0xBA	; 186
 bfe:	fe 4f       	sbci	r31, 0xFE	; 254
 c00:	80 83       	st	Z, r24
			Usart_PutChar(inputText[index-1]);
 c02:	31 97       	sbiw	r30, 0x01	; 1
 c04:	80 81       	ld	r24, Z
 c06:	0e 94 71 07 	call	0xee2	; 0xee2 <Usart_PutChar>
			index++;
 c0a:	80 91 dc 01 	lds	r24, 0x01DC
 c0e:	8f 5f       	subi	r24, 0xFF	; 255
 c10:	80 93 dc 01 	sts	0x01DC, r24
 c14:	04 c0       	rjmp	.+8      	; 0xc1e <__vector_11+0xa2>
		}
		else 
		{
			inputText[index++]=Rev;
 c16:	20 83       	st	Z, r18
 c18:	9f 5f       	subi	r25, 0xFF	; 255
 c1a:	90 93 dc 01 	sts	0x01DC, r25
		}
	}
}
 c1e:	ff 91       	pop	r31
 c20:	ef 91       	pop	r30
 c22:	df 91       	pop	r29
 c24:	cf 91       	pop	r28
 c26:	bf 91       	pop	r27
 c28:	af 91       	pop	r26
 c2a:	9f 91       	pop	r25
 c2c:	8f 91       	pop	r24
 c2e:	7f 91       	pop	r23
 c30:	6f 91       	pop	r22
 c32:	5f 91       	pop	r21
 c34:	4f 91       	pop	r20
 c36:	3f 91       	pop	r19
 c38:	2f 91       	pop	r18
 c3a:	0f 90       	pop	r0
 c3c:	0f be       	out	0x3f, r0	; 63
 c3e:	0f 90       	pop	r0
 c40:	1f 90       	pop	r1
 c42:	18 95       	reti

00000c44 <initHardware>:

// ====================================== Hardware dependent functions
void initHardware(void)
{
//--------------------------I2C initializing
	InitI2C();
 c44:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <InitI2C>
	
//--------------------------Timer1 initializing for 1.25 msec
	TCCR1A=0x00;
 c48:	1f bc       	out	0x2f, r1	; 47
  	TCCR1B=0x0A;
 c4a:	8a e0       	ldi	r24, 0x0A	; 10
 c4c:	8e bd       	out	0x2e, r24	; 46
  	TCNT1=0;
 c4e:	1d bc       	out	0x2d, r1	; 45
 c50:	1c bc       	out	0x2c, r1	; 44
  	OCR1A=576; 
 c52:	80 e4       	ldi	r24, 0x40	; 64
 c54:	92 e0       	ldi	r25, 0x02	; 2
 c56:	9b bd       	out	0x2b, r25	; 43
 c58:	8a bd       	out	0x2a, r24	; 42
 	TIMSK=0x10;
 c5a:	80 e1       	ldi	r24, 0x10	; 16
 c5c:	89 bf       	out	0x39, r24	; 57

//--------------------------Ports initializing
	
	//PORTA Pin0 to 4 for controlling the columns- Pin7 for reading the ADC 
    PORTA=0x00;
 c5e:	1b ba       	out	0x1b, r1	; 27
    DDRA=0x1F;  
 c60:	8f e1       	ldi	r24, 0x1F	; 31
 c62:	8a bb       	out	0x1a, r24	; 26
	
	// Pin0 to 7 for controlling the rows
    PORTB=0x00; 
 c64:	18 ba       	out	0x18, r1	; 24
    DDRB=0xFF;  
 c66:	8f ef       	ldi	r24, 0xFF	; 255
 c68:	87 bb       	out	0x17, r24	; 23


	//PORTC: Pin0 and 1 for I2C- Pin3 as left pin- Pin5 for sending characters by knob through I2C(SW7))
	//PORTC: Pin7 for selecting the characters provided by knob
	DDRC =0x00;
 c6a:	14 ba       	out	0x14, r1	; 20
	PORTC |=0X0F;
 c6c:	85 b3       	in	r24, 0x15	; 21
 c6e:	8f 60       	ori	r24, 0x0F	; 15
 c70:	85 bb       	out	0x15, r24	; 21

	//PORTD: Pin0 and 1 for USART- Pin3 as right pin
	DDRD = 0b0001011;
 c72:	8b e0       	ldi	r24, 0x0B	; 11
 c74:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 c76:	12 ba       	out	0x12, r1	; 18

//-----------------------USART init
    USART_Init(MYUBRR);      
 c78:	67 e1       	ldi	r22, 0x17	; 23
 c7a:	70 e0       	ldi	r23, 0x00	; 0
 c7c:	80 e0       	ldi	r24, 0x00	; 0
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	0e 94 60 07 	call	0xec0	; 0xec0 <USART_Init>
	
//-----------------------ADC init
	ADMUX|=(0<<REFS1)|(1<<REFS0);
 c84:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA|=(1<<ADEN)|(1<<ADIE)|0x86;
 c86:	86 b1       	in	r24, 0x06	; 6
 c88:	8e 68       	ori	r24, 0x8E	; 142
 c8a:	86 b9       	out	0x06, r24	; 6
	ADMUX=(ADMUX&0xF0)|0x07;
 c8c:	87 b1       	in	r24, 0x07	; 7
 c8e:	80 7f       	andi	r24, 0xF0	; 240
 c90:	87 60       	ori	r24, 0x07	; 7
 c92:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC)|(1<<ADIE);
 c94:	86 b1       	in	r24, 0x06	; 6
 c96:	88 64       	ori	r24, 0x48	; 72
 c98:	86 b9       	out	0x06, r24	; 6
	set_sleep_mode(SLEEP_MODE_ADC);
 c9a:	85 b7       	in	r24, 0x35	; 53
 c9c:	8f 74       	andi	r24, 0x4F	; 79
 c9e:	80 61       	ori	r24, 0x10	; 16
 ca0:	85 bf       	out	0x35, r24	; 53
}  
 ca2:	08 95       	ret

00000ca4 <main>:

//======================================= Main function
int main(void)
{
	
	initHardware();
 ca4:	0e 94 22 06 	call	0xc44	; 0xc44 <initHardware>
	PORTC &=0b11110111;
 ca8:	ab 98       	cbi	0x15, 3	; 21
	PORTD &=0b11110111;
 caa:	93 98       	cbi	0x12, 3	; 18
 cac:	80 e2       	ldi	r24, 0x20	; 32
 cae:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 cb0:	28 ec       	ldi	r18, 0xC8	; 200
 cb2:	30 e0       	ldi	r19, 0x00	; 0
 cb4:	f9 01       	movw	r30, r18
 cb6:	31 97       	sbiw	r30, 0x01	; 1
 cb8:	f1 f7       	brne	.-4      	; 0xcb6 <main+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 cba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 cbc:	d9 f7       	brne	.-10     	; 0xcb4 <main+0x10>
	//Waiting for 2 seconds to let the pins on the board be stable
	_delay_ms(2000);
	loadingPreviousState();
 cbe:	0e 94 8a 03 	call	0x714	; 0x714 <loadingPreviousState>
	//Finiding the first master for starting the configuration
	if(!bit_is_clear(PINC,3))
 cc2:	9b 9b       	sbis	0x13, 3	; 19
 cc4:	02 c0       	rjmp	.+4      	; 0xcca <main+0x26>
		TWCR = (1<<TWINT)|(1<<TWEN)| _BV(TWSTA)|(1<<TWEA)|(1<<TWIE);// master
 cc6:	85 ee       	ldi	r24, 0xE5	; 229
 cc8:	01 c0       	rjmp	.+2      	; 0xccc <main+0x28>
	else
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA)|(1<<TWIE);
 cca:	85 ec       	ldi	r24, 0xC5	; 197
 ccc:	86 bf       	out	0x36, r24	; 54

	configStatingFlag=1;
 cce:	81 e0       	ldi	r24, 0x01	; 1
 cd0:	80 93 3f 01 	sts	0x013F, r24
	sei();
 cd4:	78 94       	sei
 cd6:	ff cf       	rjmp	.-2      	; 0xcd6 <main+0x32>

00000cd8 <InitI2C>:
extern volatile char syncStartFlag;


void InitI2C(void)
{
	TWAR = 0x01; // Slave Address
 cd8:	81 e0       	ldi	r24, 0x01	; 1
 cda:	82 b9       	out	0x02, r24	; 2
	TWBR = 10; // Bit rate = 100Khz
 cdc:	8a e0       	ldi	r24, 0x0A	; 10
 cde:	80 b9       	out	0x00, r24	; 0
	TWCR = 0xC5; 
 ce0:	85 ec       	ldi	r24, 0xC5	; 197
 ce2:	86 bf       	out	0x36, r24	; 54
}
 ce4:	08 95       	ret

00000ce6 <interrupt_i2c>:
	return address;
}
void interrupt_i2c()
{
    unsigned char statue;
    statue=TW_STATUS;
 ce6:	81 b1       	in	r24, 0x01	; 1
	switch(statue)
 ce8:	88 7f       	andi	r24, 0xF8	; 248
 cea:	88 32       	cpi	r24, 0x28	; 40
 cec:	21 f1       	breq	.+72     	; 0xd36 <interrupt_i2c+0x50>
 cee:	89 32       	cpi	r24, 0x29	; 41
 cf0:	70 f4       	brcc	.+28     	; 0xd0e <interrupt_i2c+0x28>
 cf2:	80 31       	cpi	r24, 0x10	; 16
 cf4:	f1 f0       	breq	.+60     	; 0xd32 <interrupt_i2c+0x4c>
 cf6:	81 31       	cpi	r24, 0x11	; 17
 cf8:	20 f4       	brcc	.+8      	; 0xd02 <interrupt_i2c+0x1c>
 cfa:	88 30       	cpi	r24, 0x08	; 8
 cfc:	09 f0       	breq	.+2      	; 0xd00 <interrupt_i2c+0x1a>
 cfe:	51 c0       	rjmp	.+162    	; 0xda2 <interrupt_i2c+0xbc>
 d00:	14 c0       	rjmp	.+40     	; 0xd2a <interrupt_i2c+0x44>
 d02:	88 31       	cpi	r24, 0x18	; 24
 d04:	a1 f0       	breq	.+40     	; 0xd2e <interrupt_i2c+0x48>
 d06:	80 32       	cpi	r24, 0x20	; 32
 d08:	09 f0       	breq	.+2      	; 0xd0c <interrupt_i2c+0x26>
 d0a:	4b c0       	rjmp	.+150    	; 0xda2 <interrupt_i2c+0xbc>
 d0c:	12 c0       	rjmp	.+36     	; 0xd32 <interrupt_i2c+0x4c>
 d0e:	80 37       	cpi	r24, 0x70	; 112
 d10:	09 f4       	brne	.+2      	; 0xd14 <interrupt_i2c+0x2e>
 d12:	47 c0       	rjmp	.+142    	; 0xda2 <interrupt_i2c+0xbc>
 d14:	81 37       	cpi	r24, 0x71	; 113
 d16:	20 f4       	brcc	.+8      	; 0xd20 <interrupt_i2c+0x3a>
 d18:	80 33       	cpi	r24, 0x30	; 48
 d1a:	09 f0       	breq	.+2      	; 0xd1e <interrupt_i2c+0x38>
 d1c:	42 c0       	rjmp	.+132    	; 0xda2 <interrupt_i2c+0xbc>
 d1e:	09 c0       	rjmp	.+18     	; 0xd32 <interrupt_i2c+0x4c>
 d20:	80 39       	cpi	r24, 0x90	; 144
 d22:	09 f1       	breq	.+66     	; 0xd66 <interrupt_i2c+0x80>
 d24:	80 3a       	cpi	r24, 0xA0	; 160
 d26:	e9 f5       	brne	.+122    	; 0xda2 <interrupt_i2c+0xbc>
 d28:	2b c0       	rjmp	.+86     	; 0xd80 <interrupt_i2c+0x9a>
	{   
			// the master test 		
            	case TW_START :
				        indexSen=0;	
 d2a:	10 92 c3 02 	sts	0x02C3, r1
						TWDR = 0x00;
	                    TWCR = _BV(TWINT) | _BV(TWEN)|(1<<TWIE)| (1<<TWEA);
						//TWCR = _BV(TWINT) | _BV(TWEN)|(1<<TWIE);
						break;
				case TW_MT_SLA_ACK:
				        TWDR = 0x00;
 d2e:	13 b8       	out	0x03, r1	; 3
 d30:	38 c0       	rjmp	.+112    	; 0xda2 <interrupt_i2c+0xbc>
						break;
				case TW_MT_DATA_NACK:
						TWCR = _BV(TWINT) | _BV(TWEN)|(1<<TWIE)| _BV(TWSTA)| (1<<TWEA);
						break;
				case TW_MT_SLA_NACK:
						TWCR = _BV(TWINT) | _BV(TWEN)|(1<<TWIE)| _BV(TWSTA)| (1<<TWEA);
 d32:	85 ee       	ldi	r24, 0xE5	; 229
 d34:	37 c0       	rjmp	.+110    	; 0xda4 <interrupt_i2c+0xbe>
						break;
				case TW_MT_DATA_ACK:
						if(indexSen < SIZE){
 d36:	90 91 c3 02 	lds	r25, 0x02C3
 d3a:	80 91 c5 02 	lds	r24, 0x02C5
 d3e:	98 17       	cp	r25, r24
 d40:	68 f4       	brcc	.+26     	; 0xd5c <interrupt_i2c+0x76>
						     // TWDR = messageBuf[indexSen];
							  TWDR = i2cSendMessageBuf[indexSen];
 d42:	e0 91 c3 02 	lds	r30, 0x02C3
 d46:	f0 e0       	ldi	r31, 0x00	; 0
 d48:	e6 53       	subi	r30, 0x36	; 54
 d4a:	fd 4f       	sbci	r31, 0xFD	; 253
 d4c:	80 81       	ld	r24, Z
 d4e:	83 b9       	out	0x03, r24	; 3
							  /*Usart_PutString("Sending TWDR is : ");
							  Usart_PutChar(TWDR);
							  Usart_PutChar(0x0d);
                              Usart_PutChar(0x0a);*/
							  indexSen++;
 d50:	80 91 c3 02 	lds	r24, 0x02C3
 d54:	8f 5f       	subi	r24, 0xFF	; 255
 d56:	80 93 c3 02 	sts	0x02C3, r24
 d5a:	23 c0       	rjmp	.+70     	; 0xda2 <interrupt_i2c+0xbc>
							//initialPosition();
							//scrollColumnTaskTime=50;
							
							//initialPosition();
							
							syncStartFlag=1;
 d5c:	81 e0       	ldi	r24, 0x01	; 1
 d5e:	80 93 3e 01 	sts	0x013E, r24
						    TWCR = (1<<TWINT) | _BV(TWSTO) | (1<<TWEN)|(1<<TWIE)|(1<<TWEA);                  
 d62:	85 ed       	ldi	r24, 0xD5	; 213
 d64:	1f c0       	rjmp	.+62     	; 0xda4 <interrupt_i2c+0xbe>
					  break;
		        case TW_SR_GCALL_DATA_ACK:
					  /*if(indexRec <SIZE){
					        if(indexRec>0){*/
							   // recMsg[indexRec-1] = TWDR;
							   i2cReceiveMessageBuf[indexRec-1] = TWDR;
 d66:	e0 91 c4 02 	lds	r30, 0x02C4
 d6a:	f0 e0       	ldi	r31, 0x00	; 0
 d6c:	83 b1       	in	r24, 0x03	; 3
 d6e:	e6 53       	subi	r30, 0x36	; 54
 d70:	fd 4f       	sbci	r31, 0xFD	; 253
 d72:	80 83       	st	Z, r24
					   }*/
					//Usart_PutString("Received TWDR is : ");
					//Usart_PutChar(i2cReceiveMessageBuf[indexRec]);
					//Usart_PutChar(0x0d);
					//Usart_PutChar(0x0a);
					indexRec++;
 d74:	80 91 c4 02 	lds	r24, 0x02C4
 d78:	8f 5f       	subi	r24, 0xFF	; 255
 d7a:	80 93 c4 02 	sts	0x02C4, r24
 d7e:	11 c0       	rjmp	.+34     	; 0xda2 <interrupt_i2c+0xbc>
					break;
				case TW_SR_STOP:
						/*Usart_PutString("STOP");
						Usart_PutChar(0x0d);
                        Usart_PutChar(0x0a);*/
						indexRec--;
 d80:	80 91 c4 02 	lds	r24, 0x02C4
 d84:	81 50       	subi	r24, 0x01	; 1
 d86:	80 93 c4 02 	sts	0x02C4, r24
						//scrollColumnTaskTime=0;
						syncStartFlag=1;
 d8a:	81 e0       	ldi	r24, 0x01	; 1
 d8c:	80 93 3e 01 	sts	0x013E, r24
						//initialPosition();
						getCommand(i2cReceiveMessageBuf,indexRec);
 d90:	60 91 c4 02 	lds	r22, 0x02C4
 d94:	8b ec       	ldi	r24, 0xCB	; 203
 d96:	92 e0       	ldi	r25, 0x02	; 2
 d98:	70 e0       	ldi	r23, 0x00	; 0
 d9a:	0e 94 c7 03 	call	0x78e	; 0x78e <getCommand>
						indexRec= 0;
 d9e:	10 92 c4 02 	sts	0x02C4, r1
				case TW_SR_GCALL_DATA_NACK:	  
				case TW_SR_ARB_LOST_GCALL_ACK:	
				case TW_SR_SLA_ACK:    
				case TW_SR_DATA_ACK:
				default:
						TWCR = _BV(TWINT) | _BV(TWEN)|(1<<TWEA)|(1<<TWIE);// set the stop bit
 da2:	85 ec       	ldi	r24, 0xC5	; 197
 da4:	86 bf       	out	0x36, r24	; 54
 da6:	08 95       	ret

00000da8 <interrupt_config_i2c>:
char interrupt_config_i2c(void)
{
  
	unsigned char statue;
	extern volatile unsigned char LWPinDelayCounter;
	if(!bit_is_clear(PINC,3))//PIND&(0b00000100))
 da8:	9b 9b       	sbis	0x13, 3	; 19
 daa:	03 c0       	rjmp	.+6      	; 0xdb2 <interrupt_config_i2c+0xa>
 		LeftFlag=1;
 dac:	81 e0       	ldi	r24, 0x01	; 1
 dae:	80 93 c1 02 	sts	0x02C1, r24
/*  Usart_PutString("Left pin is : ");
  Usart_PutChar(LeftFlag+0x30);
  Usart_PutChar(0x0d);
  Usart_PutChar(0x0a);*/

	statue = TW_STATUS;
 db2:	81 b1       	in	r24, 0x01	; 1
	switch(statue)                             
 db4:	88 7f       	andi	r24, 0xF8	; 248
 db6:	88 32       	cpi	r24, 0x28	; 40
 db8:	41 f1       	breq	.+80     	; 0xe0a <interrupt_config_i2c+0x62>
 dba:	89 32       	cpi	r24, 0x29	; 41
 dbc:	78 f4       	brcc	.+30     	; 0xddc <interrupt_config_i2c+0x34>
 dbe:	80 31       	cpi	r24, 0x10	; 16
 dc0:	09 f4       	brne	.+2      	; 0xdc4 <interrupt_config_i2c+0x1c>
 dc2:	4f c0       	rjmp	.+158    	; 0xe62 <interrupt_config_i2c+0xba>
 dc4:	81 31       	cpi	r24, 0x11	; 17
 dc6:	20 f4       	brcc	.+8      	; 0xdd0 <interrupt_config_i2c+0x28>
 dc8:	88 30       	cpi	r24, 0x08	; 8
 dca:	09 f0       	breq	.+2      	; 0xdce <interrupt_config_i2c+0x26>
 dcc:	4c c0       	rjmp	.+152    	; 0xe66 <interrupt_config_i2c+0xbe>
 dce:	13 c0       	rjmp	.+38     	; 0xdf6 <interrupt_config_i2c+0x4e>
 dd0:	88 31       	cpi	r24, 0x18	; 24
 dd2:	b1 f0       	breq	.+44     	; 0xe00 <interrupt_config_i2c+0x58>
 dd4:	80 32       	cpi	r24, 0x20	; 32
 dd6:	09 f0       	breq	.+2      	; 0xdda <interrupt_config_i2c+0x32>
 dd8:	46 c0       	rjmp	.+140    	; 0xe66 <interrupt_config_i2c+0xbe>
 dda:	43 c0       	rjmp	.+134    	; 0xe62 <interrupt_config_i2c+0xba>
 ddc:	80 37       	cpi	r24, 0x70	; 112
 dde:	09 f4       	brne	.+2      	; 0xde2 <interrupt_config_i2c+0x3a>
 de0:	42 c0       	rjmp	.+132    	; 0xe66 <interrupt_config_i2c+0xbe>
 de2:	81 37       	cpi	r24, 0x71	; 113
 de4:	18 f4       	brcc	.+6      	; 0xdec <interrupt_config_i2c+0x44>
 de6:	80 33       	cpi	r24, 0x30	; 48
 de8:	f1 f5       	brne	.+124    	; 0xe66 <interrupt_config_i2c+0xbe>
 dea:	3b c0       	rjmp	.+118    	; 0xe62 <interrupt_config_i2c+0xba>
 dec:	80 39       	cpi	r24, 0x90	; 144
 dee:	b9 f0       	breq	.+46     	; 0xe1e <interrupt_config_i2c+0x76>
 df0:	80 3a       	cpi	r24, 0xA0	; 160
 df2:	c9 f5       	brne	.+114    	; 0xe66 <interrupt_config_i2c+0xbe>
 df4:	2c c0       	rjmp	.+88     	; 0xe4e <interrupt_config_i2c+0xa6>
	// the master test 		
		case TW_START :
		       /* Usart_PutString("Master START");
				Usart_PutChar(0x0d);
				Usart_PutChar(0x0a);*/
				configStatingFlag=1;
 df6:	81 e0       	ldi	r24, 0x01	; 1
 df8:	80 93 3f 01 	sts	0x013F, r24
				TWDR = 0x00;
 dfc:	13 b8       	out	0x03, r1	; 3
 dfe:	33 c0       	rjmp	.+102    	; 0xe66 <interrupt_config_i2c+0xbe>
                Usart_PutChar(0x0d);
                Usart_PutChar(0x0a);
				  Usart_PutString("I put 1 on my right, my right pin is:");
				  Usart_PutChar(0x0d);
				  Usart_PutChar(0x0a);*/
			    PORTD |=0b00001000;
 e00:	93 9a       	sbi	0x12, 3	; 18
		   		TWDR = address;			
 e02:	80 91 a4 00 	lds	r24, 0x00A4
 e06:	83 b9       	out	0x03, r24	; 3
 e08:	2e c0       	rjmp	.+92     	; 0xe66 <interrupt_config_i2c+0xbe>
				break;
		case TW_MT_DATA_ACK:
				/*Usart_PutString("data ack");
                Usart_PutChar(0x0d);
                Usart_PutChar(0x0a);*/
		        masterCount++;
 e0a:	80 91 bf 02 	lds	r24, 0x02BF
 e0e:	8f 5f       	subi	r24, 0xFF	; 255
 e10:	80 93 bf 02 	sts	0x02BF, r24
			    TWCR = (1<<TWINT) | _BV(TWSTO) | (1<<TWEN)|(1<<TWIE) | (1<<TWEA);	// switch it to slave
 e14:	85 ed       	ldi	r24, 0xD5	; 213
 e16:	86 bf       	out	0x36, r24	; 54
				configTimeoutCounter= 0;
 e18:	10 92 c0 02 	sts	0x02C0, r1
 e1c:	26 c0       	rjmp	.+76     	; 0xe6a <interrupt_config_i2c+0xc2>
				break; 
        case TW_SR_GCALL_DATA_ACK:
   				/*Usart_PutString("Receive the Genel data ack broadcase");
                Usart_PutChar(0x0d);
                Usart_PutChar(0x0a);*/
				if(LeftFlag == 1 && masterCount<1)
 e1e:	80 91 c1 02 	lds	r24, 0x02C1
 e22:	81 30       	cpi	r24, 0x01	; 1
 e24:	49 f4       	brne	.+18     	; 0xe38 <interrupt_config_i2c+0x90>
 e26:	80 91 bf 02 	lds	r24, 0x02BF
 e2a:	88 23       	and	r24, r24
 e2c:	29 f4       	brne	.+10     	; 0xe38 <interrupt_config_i2c+0x90>
				    address = TWDR+1;
 e2e:	83 b1       	in	r24, 0x03	; 3
 e30:	8f 5f       	subi	r24, 0xFF	; 255
 e32:	80 93 a4 00 	sts	0x00A4, r24
 e36:	08 c0       	rjmp	.+16     	; 0xe48 <interrupt_config_i2c+0xa0>
				else if (maxAddress<TWDR)
 e38:	90 91 be 02 	lds	r25, 0x02BE
 e3c:	83 b1       	in	r24, 0x03	; 3
 e3e:	98 17       	cp	r25, r24
 e40:	18 f4       	brcc	.+6      	; 0xe48 <interrupt_config_i2c+0xa0>
				    maxAddress = TWDR;
 e42:	83 b1       	in	r24, 0x03	; 3
 e44:	80 93 be 02 	sts	0x02BE, r24
				configTimeoutCounter= 0;
 e48:	10 92 c0 02 	sts	0x02C0, r1
 e4c:	0c c0       	rjmp	.+24     	; 0xe66 <interrupt_config_i2c+0xbe>
				break;			
		case TW_SR_STOP:
				/*Usart_PutString("STOP");
                Usart_PutChar(0x0d);
                Usart_PutChar(0x0a);*/
				if(LeftFlag == 1 && masterCount<1){
 e4e:	80 91 c1 02 	lds	r24, 0x02C1
 e52:	81 30       	cpi	r24, 0x01	; 1
 e54:	41 f4       	brne	.+16     	; 0xe66 <interrupt_config_i2c+0xbe>
 e56:	80 91 bf 02 	lds	r24, 0x02BF
 e5a:	88 23       	and	r24, r24
 e5c:	21 f4       	brne	.+8      	; 0xe66 <interrupt_config_i2c+0xbe>
					configTimeoutCounter= 0;
 e5e:	10 92 c0 02 	sts	0x02C0, r1
					TWCR=_BV(TWEA) |_BV(TWINT)|(1<<TWIE) |_BV(TWSTA)| _BV(TWEN);//switch to master
 e62:	85 ee       	ldi	r24, 0xE5	; 229
 e64:	01 c0       	rjmp	.+2      	; 0xe68 <interrupt_config_i2c+0xc0>
		case TW_SR_SLA_ACK:    
		case TW_SR_DATA_ACK:
		case TW_SR_ARB_LOST_GCALL_ACK:		
		case TW_SR_GCALL_DATA_NACK:
	    default:
				TWCR = _BV(TWINT) |(1<<TWEA)|(1<<TWIE)| _BV(TWEN);
 e66:	85 ec       	ldi	r24, 0xC5	; 197
 e68:	86 bf       	out	0x36, r24	; 54
				break;
   }
	if(maxAddress <= address)
 e6a:	90 91 be 02 	lds	r25, 0x02BE
 e6e:	80 91 a4 00 	lds	r24, 0x00A4
 e72:	89 17       	cp	r24, r25
 e74:	20 f0       	brcs	.+8      	; 0xe7e <interrupt_config_i2c+0xd6>
	    maxAddress = address;
 e76:	80 91 a4 00 	lds	r24, 0x00A4
 e7a:	80 93 be 02 	sts	0x02BE, r24
   
	Usart_PutString("my address is ");
 e7e:	85 e8       	ldi	r24, 0x85	; 133
 e80:	90 e0       	ldi	r25, 0x00	; 0
 e82:	0e 94 75 07 	call	0xeea	; 0xeea <Usart_PutString>
	Usart_PutChar(address+0x30);
 e86:	80 91 a4 00 	lds	r24, 0x00A4
 e8a:	80 5d       	subi	r24, 0xD0	; 208
 e8c:	0e 94 71 07 	call	0xee2	; 0xee2 <Usart_PutChar>
	Usart_PutChar(0x0d);
 e90:	8d e0       	ldi	r24, 0x0D	; 13
 e92:	0e 94 71 07 	call	0xee2	; 0xee2 <Usart_PutChar>
    Usart_PutChar(0x0a);
 e96:	8a e0       	ldi	r24, 0x0A	; 10
 e98:	0e 94 71 07 	call	0xee2	; 0xee2 <Usart_PutChar>
	
	Usart_PutString("max address is ");
 e9c:	84 e9       	ldi	r24, 0x94	; 148
 e9e:	90 e0       	ldi	r25, 0x00	; 0
 ea0:	0e 94 75 07 	call	0xeea	; 0xeea <Usart_PutString>
    Usart_PutChar(maxAddress+0x30);
 ea4:	80 91 be 02 	lds	r24, 0x02BE
 ea8:	80 5d       	subi	r24, 0xD0	; 208
 eaa:	0e 94 71 07 	call	0xee2	; 0xee2 <Usart_PutChar>
	Usart_PutChar(0x0d);
 eae:	8d e0       	ldi	r24, 0x0D	; 13
 eb0:	0e 94 71 07 	call	0xee2	; 0xee2 <Usart_PutChar>
    Usart_PutChar(0x0a);
 eb4:	8a e0       	ldi	r24, 0x0A	; 10
 eb6:	0e 94 71 07 	call	0xee2	; 0xee2 <Usart_PutChar>
	return address;
 eba:	80 91 a4 00 	lds	r24, 0x00A4
}
 ebe:	08 95       	ret

00000ec0 <USART_Init>:
 ec0:	86 e8       	ldi	r24, 0x86	; 134
 ec2:	80 bd       	out	0x20, r24	; 32
 ec4:	1b b8       	out	0x0b, r1	; 11
 ec6:	88 e9       	ldi	r24, 0x98	; 152
 ec8:	8a b9       	out	0x0a, r24	; 10
 eca:	87 e1       	ldi	r24, 0x17	; 23
 ecc:	89 b9       	out	0x09, r24	; 9
 ece:	10 bc       	out	0x20, r1	; 32
 ed0:	08 95       	ret

00000ed2 <USART_Receive>:
 ed2:	5f 9b       	sbis	0x0b, 7	; 11
 ed4:	fe cf       	rjmp	.-4      	; 0xed2 <USART_Receive>
 ed6:	8c b1       	in	r24, 0x0c	; 12
 ed8:	08 95       	ret

00000eda <USART_Transmit>:
 eda:	5d 9b       	sbis	0x0b, 5	; 11
 edc:	fe cf       	rjmp	.-4      	; 0xeda <USART_Transmit>
 ede:	8c b9       	out	0x0c, r24	; 12
 ee0:	08 95       	ret

00000ee2 <Usart_PutChar>:
 ee2:	5d 9b       	sbis	0x0b, 5	; 11
 ee4:	fe cf       	rjmp	.-4      	; 0xee2 <Usart_PutChar>
 ee6:	8c b9       	out	0x0c, r24	; 12
 ee8:	08 95       	ret

00000eea <Usart_PutString>:
 eea:	fc 01       	movw	r30, r24
 eec:	04 c0       	rjmp	.+8      	; 0xef6 <Usart_PutString+0xc>
 eee:	5d 9b       	sbis	0x0b, 5	; 11
 ef0:	fe cf       	rjmp	.-4      	; 0xeee <Usart_PutString+0x4>
 ef2:	31 96       	adiw	r30, 0x01	; 1
 ef4:	8c b9       	out	0x0c, r24	; 12
 ef6:	80 81       	ld	r24, Z
 ef8:	88 23       	and	r24, r24
 efa:	c9 f7       	brne	.-14     	; 0xeee <Usart_PutString+0x4>
 efc:	08 95       	ret

00000efe <__divmodhi4>:
 efe:	97 fb       	bst	r25, 7
 f00:	09 2e       	mov	r0, r25
 f02:	07 26       	eor	r0, r23
 f04:	0a d0       	rcall	.+20     	; 0xf1a <__divmodhi4_neg1>
 f06:	77 fd       	sbrc	r23, 7
 f08:	04 d0       	rcall	.+8      	; 0xf12 <__divmodhi4_neg2>
 f0a:	0c d0       	rcall	.+24     	; 0xf24 <__udivmodhi4>
 f0c:	06 d0       	rcall	.+12     	; 0xf1a <__divmodhi4_neg1>
 f0e:	00 20       	and	r0, r0
 f10:	1a f4       	brpl	.+6      	; 0xf18 <__divmodhi4_exit>

00000f12 <__divmodhi4_neg2>:
 f12:	70 95       	com	r23
 f14:	61 95       	neg	r22
 f16:	7f 4f       	sbci	r23, 0xFF	; 255

00000f18 <__divmodhi4_exit>:
 f18:	08 95       	ret

00000f1a <__divmodhi4_neg1>:
 f1a:	f6 f7       	brtc	.-4      	; 0xf18 <__divmodhi4_exit>
 f1c:	90 95       	com	r25
 f1e:	81 95       	neg	r24
 f20:	9f 4f       	sbci	r25, 0xFF	; 255
 f22:	08 95       	ret

00000f24 <__udivmodhi4>:
 f24:	aa 1b       	sub	r26, r26
 f26:	bb 1b       	sub	r27, r27
 f28:	51 e1       	ldi	r21, 0x11	; 17
 f2a:	07 c0       	rjmp	.+14     	; 0xf3a <__udivmodhi4_ep>

00000f2c <__udivmodhi4_loop>:
 f2c:	aa 1f       	adc	r26, r26
 f2e:	bb 1f       	adc	r27, r27
 f30:	a6 17       	cp	r26, r22
 f32:	b7 07       	cpc	r27, r23
 f34:	10 f0       	brcs	.+4      	; 0xf3a <__udivmodhi4_ep>
 f36:	a6 1b       	sub	r26, r22
 f38:	b7 0b       	sbc	r27, r23

00000f3a <__udivmodhi4_ep>:
 f3a:	88 1f       	adc	r24, r24
 f3c:	99 1f       	adc	r25, r25
 f3e:	5a 95       	dec	r21
 f40:	a9 f7       	brne	.-22     	; 0xf2c <__udivmodhi4_loop>
 f42:	80 95       	com	r24
 f44:	90 95       	com	r25
 f46:	bc 01       	movw	r22, r24
 f48:	cd 01       	movw	r24, r26
 f4a:	08 95       	ret

00000f4c <strcpy>:
 f4c:	fb 01       	movw	r30, r22
 f4e:	dc 01       	movw	r26, r24
 f50:	01 90       	ld	r0, Z+
 f52:	0d 92       	st	X+, r0
 f54:	00 20       	and	r0, r0
 f56:	e1 f7       	brne	.-8      	; 0xf50 <strcpy+0x4>
 f58:	08 95       	ret

00000f5a <__eerd_block_m16>:
 f5a:	dc 01       	movw	r26, r24
 f5c:	cb 01       	movw	r24, r22

00000f5e <__eerd_blraw_m16>:
 f5e:	fc 01       	movw	r30, r24
 f60:	e1 99       	sbic	0x1c, 1	; 28
 f62:	fe cf       	rjmp	.-4      	; 0xf60 <__eerd_blraw_m16+0x2>
 f64:	06 c0       	rjmp	.+12     	; 0xf72 <__eerd_blraw_m16+0x14>
 f66:	ff bb       	out	0x1f, r31	; 31
 f68:	ee bb       	out	0x1e, r30	; 30
 f6a:	e0 9a       	sbi	0x1c, 0	; 28
 f6c:	31 96       	adiw	r30, 0x01	; 1
 f6e:	0d b2       	in	r0, 0x1d	; 29
 f70:	0d 92       	st	X+, r0
 f72:	41 50       	subi	r20, 0x01	; 1
 f74:	50 40       	sbci	r21, 0x00	; 0
 f76:	b8 f7       	brcc	.-18     	; 0xf66 <__eerd_blraw_m16+0x8>
 f78:	08 95       	ret

00000f7a <__eerd_byte_m16>:
 f7a:	e1 99       	sbic	0x1c, 1	; 28
 f7c:	fe cf       	rjmp	.-4      	; 0xf7a <__eerd_byte_m16>
 f7e:	9f bb       	out	0x1f, r25	; 31
 f80:	8e bb       	out	0x1e, r24	; 30
 f82:	e0 9a       	sbi	0x1c, 0	; 28
 f84:	99 27       	eor	r25, r25
 f86:	8d b3       	in	r24, 0x1d	; 29
 f88:	08 95       	ret

00000f8a <__eewr_byte_m16>:
 f8a:	26 2f       	mov	r18, r22

00000f8c <__eewr_r18_m16>:
 f8c:	e1 99       	sbic	0x1c, 1	; 28
 f8e:	fe cf       	rjmp	.-4      	; 0xf8c <__eewr_r18_m16>
 f90:	9f bb       	out	0x1f, r25	; 31
 f92:	8e bb       	out	0x1e, r24	; 30
 f94:	2d bb       	out	0x1d, r18	; 29
 f96:	0f b6       	in	r0, 0x3f	; 63
 f98:	f8 94       	cli
 f9a:	e2 9a       	sbi	0x1c, 2	; 28
 f9c:	e1 9a       	sbi	0x1c, 1	; 28
 f9e:	0f be       	out	0x3f, r0	; 63
 fa0:	01 96       	adiw	r24, 0x01	; 1
 fa2:	08 95       	ret

00000fa4 <__eewr_word_m16>:
 fa4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__eewr_byte_m16>
 fa8:	27 2f       	mov	r18, r23
 faa:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__eewr_r18_m16>

00000fae <_exit>:
 fae:	f8 94       	cli

00000fb0 <__stop_program>:
 fb0:	ff cf       	rjmp	.-2      	; 0xfb0 <__stop_program>
